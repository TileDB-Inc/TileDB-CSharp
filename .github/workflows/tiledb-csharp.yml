name: TileDB-CSharp

on:
  push:
    tags: [ '*' ]
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Run-Tests:
    strategy:
      matrix:
        # Will be checking following versions
        dotnet: ['5.0', '6.0']
        # Repeat this test for each os
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # Checks out repository
      - uses: actions/checkout@v3

      # Install tiledb
      - name: Install tiledb
        shell: bash
        run: ./.github/scripts/install_tiledb.sh

      - name: Remove existing .NET versions
        shell: bash
        run: |
          rm -rf $DOTNET_ROOT

      # Following action sets up dotnet and uses the strategy matrix to test on
      # specific versions
      - name: Set up dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Display .NET versions
        run: dotnet --info

      # DotNet build
      - name: Dotnet build for TileDB.CSharp
        run: |
          dotnet build /p:Platform=x64 -c Release sources/TileDB.CSharp

      # DotNet test
      - name: Test TileDB.CSharp
        run: |
          dotnet test -c Release tests/TileDB.CSharp.Test

      - name: Run examples
        shell: bash
        run: |
          find examples/ -name *.csproj -execdir dotnet run \;

  Stage-Release-Candidate:
    needs: Run-Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Will be checking following versions
        dotnet: ['5.0']
    steps:
      # Checks out repository
      - uses: actions/checkout@v3

      # Following action sets up dotnet and uses the strategy matrix to test on
      # specific versions
      - name: Set up dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Display dotnet versions
        run: dotnet --info

      # Download tiledb
      - name: Download tiledb
        run: ./.github/scripts/download_tiledb.sh

      - name: Copy tiledb lib
        run: |
          cp sources/TileDB.CSharp/runtimes/linux-x64/native/libtiledb.so.2.10 sources/TileDB.CSharp/runtimes/linux-x64/native/libtiledb.so

      # DotNet build
      - name: Dotnet build for TileDB.CSharp
        run: |
          dotnet build /p:Platform=x64 -c Release sources/TileDB.CSharp

      # DotNet pack
      - name: Dotnet pack for TileDB.CSharp
        run: |
          dotnet pack ./sources/TileDB.CSharp/TileDB.CSharp.csproj /p:NuspecFile=TileDB.CSharp.nuspec -c Release

      - name: Archive nuget artifact
        uses: actions/upload-artifact@v3
        with:
          name: TileDB NuGet Package
          path: sources/TileDB.CSharp/lib/TileDB.CSharp.*.nupkg

  Test-NuGet-Release:
    needs: Stage-Release-Candidate
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dotnet: ['5.0', '6.0']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout TileDB-CSharp repository
        uses: actions/checkout@v3

      - name: Download TileDB.CSharp NuGet artifact
        uses: actions/download-artifact@v3
        with:
          name: TileDB NuGet Package

      # GitHub runners come with several versions of .NET preinstalled; Remove them to target version
      - name: Remove existing .NET versions
        shell: bash
        run: |
          rm -rf $DOTNET_ROOT

      - name: Set up dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Display dotnet versions
        run: dotnet --info

      - name: Setup NuGet
        uses: nuget/setup-nuget@v1

      # Set up TileDB.CSharp.Test project to use local NuGet package
      - name: Setup local test project
        shell: bash
        run: |
          nuget add TileDB.CSharp.*.nupkg -Source ./packages
          dotnet new mstest -o tests/TileDB.CSharp.Test/ --force
          dotnet add tests/TileDB.CSharp.Test/TileDB.CSharp.Test.csproj package TileDB.CSharp -s ./packages

      # Run tests using NuGet release candidate
      - name: Test TileDB.CSharp
        run: |
          dotnet test -c Release tests/TileDB.CSharp.Test

  Release:
    # Only run this job if a tag was provided
    if: startsWith(github.ref, 'refs/tags/')
    needs: Test-NuGet-Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: TileDB NuGet Package

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./*.nupkg
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.github_release.outputs.changelog }}
          draft: false
          prerelease: false
