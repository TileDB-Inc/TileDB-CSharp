/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_tiledbcs(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_tiledbcs(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_tiledbcs(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  // Code to handle throwing of C# TileDBErrorApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is TileDBErrorExceptionDelegate
  // and the equivalent tileDBErrorExceptionCallback instance is tileDBErrorDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  CSharpExceptionCallback_t tileDBErrorExceptionCallback = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL TileDBErrorExceptionRegisterCallback(CSharpExceptionCallback_t tileDBErrorCallback) {
    tileDBErrorExceptionCallback = tileDBErrorCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIG_CSharpSetPendingExceptionTileDBError(const char *msg) {
    tileDBErrorExceptionCallback(msg);
  }


  // Code to handle throwing of C# TypeErrorApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is TypeErrorExceptionDelegate
  // and the equivalent typeErrorExceptionCallback instance is typeErrorDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  CSharpExceptionCallback_t typeErrorExceptionCallback = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL TypeErrorExceptionRegisterCallback(CSharpExceptionCallback_t typeErrorCallback) {
    typeErrorExceptionCallback = typeErrorCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIG_CSharpSetPendingExceptionTypeError(const char *msg) {
    typeErrorExceptionCallback(msg);
  }


  // Code to handle throwing of C# SchemaMismatchApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is SchemaMismatchExceptionDelegate
  // and the equivalent schemaMismatchExceptionCallback instance is schemaMismatchDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  CSharpExceptionCallback_t schemaMismatchExceptionCallback = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL SchemaMismatchExceptionRegisterCallback(CSharpExceptionCallback_t schemaMismatchCallback) {
    schemaMismatchExceptionCallback = schemaMismatchCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIG_CSharpSetPendingExceptionSchemaMismatch(const char *msg) {
    schemaMismatchExceptionCallback(msg);
  }


  // Code to handle throwing of C# AttributeErrorApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is AttributeErrorExceptionDelegate
  // and the equivalent attributeErrorExceptionCallback instance is attributeErrorDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  CSharpExceptionCallback_t attributeErrorExceptionCallback = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL AttributeErrorExceptionRegisterCallback(CSharpExceptionCallback_t attributeErrorCallback) {
    attributeErrorExceptionCallback = attributeErrorCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIG_CSharpSetPendingExceptionAttributeError(const char *msg) {
    attributeErrorExceptionCallback(msg);
  }


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <list>
#include <algorithm>
#include <stdexcept>


#include <set>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< unsigned int > *new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(int capacity){
        std::vector< unsigned int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_unsigned_SS_int_Sg__getitem(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__setitem(std::vector< unsigned int > *self,int index,unsigned int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__AddRange(std::vector< unsigned int > *self,std::vector< unsigned int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__GetRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Insert(std::vector< unsigned int > *self,int index,unsigned int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__InsertRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__Repeat(unsigned int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned int >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(std::vector< unsigned int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__SetRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Contains(std::vector< unsigned int > *self,unsigned int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__IndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Remove(std::vector< unsigned int > *self,unsigned int const &value){
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int64_t > *new_std_vector_Sl_int64_t_Sg___SWIG_2(int capacity){
        std::vector< long long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< long long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN long long std_vector_Sl_int64_t_Sg__getitemcopy(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< long long >::value_type const &std_vector_Sl_int64_t_Sg__getitem(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__setitem(std::vector< int64_t > *self,int index,long long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__AddRange(std::vector< int64_t > *self,std::vector< long long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< long long > *std_vector_Sl_int64_t_Sg__GetRange(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< long long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Insert(std::vector< int64_t > *self,int index,long long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__InsertRange(std::vector< int64_t > *self,int index,std::vector< long long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__RemoveAt(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__RemoveRange(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< long long > *std_vector_Sl_int64_t_Sg__Repeat(long long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< long long >(count, value);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Reverse__SWIG_0(std::vector< int64_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Reverse__SWIG_1(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__SetRange(std::vector< int64_t > *self,int index,std::vector< long long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int64_t_Sg__Contains(std::vector< int64_t > *self,long long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int64_t_Sg__IndexOf(std::vector< int64_t > *self,long long const &value){
        int index = -1;
        std::vector< long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int64_t_Sg__LastIndexOf(std::vector< int64_t > *self,long long const &value){
        int index = -1;
        std::vector< long long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int64_t_Sg__Remove(std::vector< int64_t > *self,long long const &value){
        std::vector< long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint64_t > *new_std_vector_Sl_uint64_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned long long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned long long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned long long std_vector_Sl_uint64_t_Sg__getitemcopy(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned long long >::value_type const &std_vector_Sl_uint64_t_Sg__getitem(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__setitem(std::vector< uint64_t > *self,int index,unsigned long long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__AddRange(std::vector< uint64_t > *self,std::vector< unsigned long long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_uint64_t_Sg__GetRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned long long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Insert(std::vector< uint64_t > *self,int index,unsigned long long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__InsertRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveAt(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_uint64_t_Sg__Repeat(unsigned long long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned long long >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(std::vector< uint64_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__SetRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Contains(std::vector< uint64_t > *self,unsigned long long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__IndexOf(std::vector< uint64_t > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__LastIndexOf(std::vector< uint64_t > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Remove(std::vector< uint64_t > *self,unsigned long long const &value){
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(int capacity){
        std::vector< char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char std_vector_Sl_char_Sg__getitemcopy(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg__getitem(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__setitem(std::vector< char > *self,int index,char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__AddRange(std::vector< char > *self,std::vector< char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__GetRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Insert(std::vector< char > *self,int index,char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__InsertRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveAt(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__Repeat(char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_0(std::vector< char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_1(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__SetRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Contains(std::vector< char > *self,char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_Sg__IndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_Sg__LastIndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Remove(std::vector< char > *self,char const &value){
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< unsigned char > *new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_unsigned_SS_char_Sg__getitem(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__setitem(std::vector< unsigned char > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__AddRange(std::vector< unsigned char > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__GetRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Insert(std::vector< unsigned char > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__InsertRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(std::vector< unsigned char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__SetRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Contains(std::vector< unsigned char > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__IndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Remove(std::vector< unsigned char > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< char const * > *new_std_vector_Sl_char_SS_const_Sm__Sg___SWIG_2(int capacity){
        std::vector< char const * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char const * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char const *std_vector_Sl_char_SS_const_Sm__Sg__getitemcopy(std::vector< char const * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< char const * >::value_type const &std_vector_Sl_char_SS_const_Sm__Sg__getitem(std::vector< char const * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__setitem(std::vector< char const * > *self,int index,char const *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__AddRange(std::vector< char const * > *self,std::vector< char const * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char const * > *std_vector_Sl_char_SS_const_Sm__Sg__GetRange(std::vector< char const * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char const * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__Insert(std::vector< char const * > *self,int index,char const *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__InsertRange(std::vector< char const * > *self,int index,std::vector< char const * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__RemoveAt(std::vector< char const * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__RemoveRange(std::vector< char const * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char const * > *std_vector_Sl_char_SS_const_Sm__Sg__Repeat(char const *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char const * >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__Reverse__SWIG_0(std::vector< char const * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__Reverse__SWIG_1(std::vector< char const * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__SetRange(std::vector< char const * > *self,int index,std::vector< char const * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_SS_const_Sm__Sg__Contains(std::vector< char const * > *self,char const *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_SS_const_Sm__Sg__IndexOf(std::vector< char const * > *self,char const *const &value){
        int index = -1;
        std::vector< char const * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_SS_const_Sm__Sg__LastIndexOf(std::vector< char const * > *self,char const *const &value){
        int index = -1;
        std::vector< char const * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_SS_const_Sm__Sg__Remove(std::vector< char const * > *self,char const *const &value){
        std::vector< char const * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< int > > *new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< int > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< int > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< int > std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitemcopy(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitem(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__setitem(std::vector< std::vector< int > > *self,int index,std::vector< int > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__AddRange(std::vector< std::vector< int > > *self,std::vector< std::vector< int > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< int > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg__GetRange(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< int > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Insert(std::vector< std::vector< int > > *self,int index,std::vector< int > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__InsertRange(std::vector< std::vector< int > > *self,int index,std::vector< std::vector< int > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveAt(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveRange(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< int > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg__Repeat(std::vector< int > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< int > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< int > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__SetRange(std::vector< std::vector< int > > *self,int index,std::vector< std::vector< int > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< unsigned int > > *new_std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< unsigned int > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< unsigned int > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< unsigned int > std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__getitemcopy(std::vector< std::vector< unsigned int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< unsigned int > >::value_type const &std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__getitem(std::vector< std::vector< unsigned int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__setitem(std::vector< std::vector< unsigned int > > *self,int index,std::vector< unsigned int > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__AddRange(std::vector< std::vector< unsigned int > > *self,std::vector< std::vector< unsigned int > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< unsigned int > > *std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__GetRange(std::vector< std::vector< unsigned int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< unsigned int > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Insert(std::vector< std::vector< unsigned int > > *self,int index,std::vector< unsigned int > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__InsertRange(std::vector< std::vector< unsigned int > > *self,int index,std::vector< std::vector< unsigned int > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__RemoveAt(std::vector< std::vector< unsigned int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__RemoveRange(std::vector< std::vector< unsigned int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< unsigned int > > *std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Repeat(std::vector< unsigned int > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< unsigned int > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< unsigned int > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< unsigned int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__SetRange(std::vector< std::vector< unsigned int > > *self,int index,std::vector< std::vector< unsigned int > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< int64_t > > *new_std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< int64_t > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< int64_t > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< int64_t > std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__getitemcopy(std::vector< std::vector< int64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< long long > >::value_type const &std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__getitem(std::vector< std::vector< int64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__setitem(std::vector< std::vector< int64_t > > *self,int index,std::vector< int64_t > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__AddRange(std::vector< std::vector< int64_t > > *self,std::vector< std::vector< int64_t > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< int64_t > > *std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__GetRange(std::vector< std::vector< int64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< int64_t > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Insert(std::vector< std::vector< int64_t > > *self,int index,std::vector< int64_t > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__InsertRange(std::vector< std::vector< int64_t > > *self,int index,std::vector< std::vector< int64_t > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__RemoveAt(std::vector< std::vector< int64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__RemoveRange(std::vector< std::vector< int64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< int64_t > > *std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Repeat(std::vector< int64_t > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< int64_t > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< int64_t > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< int64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__SetRange(std::vector< std::vector< int64_t > > *self,int index,std::vector< std::vector< int64_t > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< uint64_t > > *new_std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< uint64_t > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< uint64_t > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< uint64_t > std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__getitemcopy(std::vector< std::vector< uint64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< unsigned long long > >::value_type const &std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__getitem(std::vector< std::vector< uint64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__setitem(std::vector< std::vector< uint64_t > > *self,int index,std::vector< uint64_t > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__AddRange(std::vector< std::vector< uint64_t > > *self,std::vector< std::vector< uint64_t > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< uint64_t > > *std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__GetRange(std::vector< std::vector< uint64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< uint64_t > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Insert(std::vector< std::vector< uint64_t > > *self,int index,std::vector< uint64_t > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__InsertRange(std::vector< std::vector< uint64_t > > *self,int index,std::vector< std::vector< uint64_t > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__RemoveAt(std::vector< std::vector< uint64_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__RemoveRange(std::vector< std::vector< uint64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< uint64_t > > *std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Repeat(std::vector< uint64_t > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< uint64_t > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< uint64_t > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< uint64_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__SetRange(std::vector< std::vector< uint64_t > > *self,int index,std::vector< std::vector< uint64_t > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< char > > *new_std_vector_Sl_std_vector_Sl_char_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< char > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< char > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< char > std_vector_Sl_std_vector_Sl_char_Sg__Sg__getitemcopy(std::vector< std::vector< char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< char > >::value_type const &std_vector_Sl_std_vector_Sl_char_Sg__Sg__getitem(std::vector< std::vector< char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__setitem(std::vector< std::vector< char > > *self,int index,std::vector< char > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__AddRange(std::vector< std::vector< char > > *self,std::vector< std::vector< char > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< char > > *std_vector_Sl_std_vector_Sl_char_Sg__Sg__GetRange(std::vector< std::vector< char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< char > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__Insert(std::vector< std::vector< char > > *self,int index,std::vector< char > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__InsertRange(std::vector< std::vector< char > > *self,int index,std::vector< std::vector< char > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__RemoveAt(std::vector< std::vector< char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__RemoveRange(std::vector< std::vector< char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< char > > *std_vector_Sl_std_vector_Sl_char_Sg__Sg__Repeat(std::vector< char > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< char > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< char > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__SetRange(std::vector< std::vector< char > > *self,int index,std::vector< std::vector< char > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< unsigned char > > *new_std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< unsigned char > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< unsigned char > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< unsigned char > std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__getitemcopy(std::vector< std::vector< unsigned char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type const &std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__getitem(std::vector< std::vector< unsigned char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__setitem(std::vector< std::vector< unsigned char > > *self,int index,std::vector< unsigned char > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__AddRange(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< unsigned char > > *std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__GetRange(std::vector< std::vector< unsigned char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< unsigned char > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Insert(std::vector< std::vector< unsigned char > > *self,int index,std::vector< unsigned char > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__InsertRange(std::vector< std::vector< unsigned char > > *self,int index,std::vector< std::vector< unsigned char > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__RemoveAt(std::vector< std::vector< unsigned char > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__RemoveRange(std::vector< std::vector< unsigned char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< unsigned char > > *std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Repeat(std::vector< unsigned char > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< unsigned char > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< unsigned char > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< unsigned char > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__SetRange(std::vector< std::vector< unsigned char > > *self,int index,std::vector< std::vector< unsigned char > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< double > > *new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< double > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< double > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(std::vector< std::vector< double > > *self,int index,std::vector< double > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(std::vector< std::vector< double > > *self,std::vector< std::vector< double > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< double > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(std::vector< std::vector< double > > *self,int index,std::vector< double > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat(std::vector< double > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< double > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< double > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::vector< std::string > > *new_std_vector_Sl_std_vector_Sl_std_string_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< std::string > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< std::string > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< std::string > std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__getitemcopy(std::vector< std::vector< std::string > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< std::string > >::value_type const &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__getitem(std::vector< std::vector< std::string > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__setitem(std::vector< std::vector< std::string > > *self,int index,std::vector< std::string > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__AddRange(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< std::string > > *std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__GetRange(std::vector< std::vector< std::string > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< std::string > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Insert(std::vector< std::vector< std::string > > *self,int index,std::vector< std::string > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__InsertRange(std::vector< std::vector< std::string > > *self,int index,std::vector< std::vector< std::string > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__RemoveAt(std::vector< std::vector< std::string > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__RemoveRange(std::vector< std::vector< std::string > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< std::string > > *std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Repeat(std::vector< std::string > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< std::string > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< std::string > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< std::string > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__SetRange(std::vector< std::vector< std::string > > *self,int index,std::vector< std::vector< std::string > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg__getitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__Add(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &value){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__Remove(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(std::map< std::string,std::string > *self){
        return new std::map< std::string, std::string, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::string >::key_type const &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,int >::mapped_type const &std_map_Sl_std_string_Sc_int_Sg__getitem(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
        std::map< std::string, int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__setitem(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key,std::map< std::string,int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__ContainsKey(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
        std::map< std::string, int, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__Add(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key,std::map< std::string,int >::mapped_type const &value){
        std::map< std::string, int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, int >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__Remove(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
        std::map< std::string, int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,int,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_int_Sg__create_iterator_begin(std::map< std::string,int > *self){
        return new std::map< std::string, int, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,int >::key_type const &std_map_Sl_std_string_Sc_int_Sg__get_next_key(std::map< std::string,int > *self,std::map< std::string,int,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, int, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__destroy_iterator(std::map< std::string,int > *self,std::map< std::string,int,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,unsigned int >::mapped_type const &std_map_Sl_std_string_Sc_uint32_t_Sg__getitem(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int >::key_type const &key){
        std::map< std::string, unsigned int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint32_t_Sg__setitem(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int >::key_type const &key,std::map< std::string,unsigned int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint32_t_Sg__ContainsKey(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int >::key_type const &key){
        std::map< std::string, unsigned int, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint32_t_Sg__Add(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int >::key_type const &key,std::map< std::string,unsigned int >::mapped_type const &value){
        std::map< std::string, unsigned int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, unsigned int >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint32_t_Sg__Remove(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int >::key_type const &key){
        std::map< std::string, unsigned int, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,unsigned int,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_uint32_t_Sg__create_iterator_begin(std::map< std::string,uint32_t > *self){
        return new std::map< std::string, unsigned int, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,unsigned int >::key_type const &std_map_Sl_std_string_Sc_uint32_t_Sg__get_next_key(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, unsigned int, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint32_t_Sg__destroy_iterator(std::map< std::string,uint32_t > *self,std::map< std::string,unsigned int,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,long long >::mapped_type const &std_map_Sl_std_string_Sc_int64_t_Sg__getitem(std::map< std::string,int64_t > *self,std::map< std::string,long long >::key_type const &key){
        std::map< std::string, long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int64_t_Sg__setitem(std::map< std::string,int64_t > *self,std::map< std::string,long long >::key_type const &key,std::map< std::string,long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_int64_t_Sg__ContainsKey(std::map< std::string,int64_t > *self,std::map< std::string,long long >::key_type const &key){
        std::map< std::string, long long, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int64_t_Sg__Add(std::map< std::string,int64_t > *self,std::map< std::string,long long >::key_type const &key,std::map< std::string,long long >::mapped_type const &value){
        std::map< std::string, long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_int64_t_Sg__Remove(std::map< std::string,int64_t > *self,std::map< std::string,long long >::key_type const &key){
        std::map< std::string, long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,long long,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_int64_t_Sg__create_iterator_begin(std::map< std::string,int64_t > *self){
        return new std::map< std::string, long long, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,long long >::key_type const &std_map_Sl_std_string_Sc_int64_t_Sg__get_next_key(std::map< std::string,int64_t > *self,std::map< std::string,long long,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, long long, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int64_t_Sg__destroy_iterator(std::map< std::string,int64_t > *self,std::map< std::string,long long,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,unsigned long long >::mapped_type const &std_map_Sl_std_string_Sc_uint64_t_Sg__getitem(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long >::key_type const &key){
        std::map< std::string, unsigned long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint64_t_Sg__setitem(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long >::key_type const &key,std::map< std::string,unsigned long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint64_t_Sg__ContainsKey(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long >::key_type const &key){
        std::map< std::string, unsigned long long, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint64_t_Sg__Add(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long >::key_type const &key,std::map< std::string,unsigned long long >::mapped_type const &value){
        std::map< std::string, unsigned long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, unsigned long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint64_t_Sg__Remove(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long >::key_type const &key){
        std::map< std::string, unsigned long long, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,unsigned long long,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_uint64_t_Sg__create_iterator_begin(std::map< std::string,uint64_t > *self){
        return new std::map< std::string, unsigned long long, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,unsigned long long >::key_type const &std_map_Sl_std_string_Sc_uint64_t_Sg__get_next_key(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, unsigned long long, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_uint64_t_Sg__destroy_iterator(std::map< std::string,uint64_t > *self,std::map< std::string,unsigned long long,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,double >::mapped_type const &std_map_Sl_std_string_Sc_double_Sg__getitem(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
        std::map< std::string, double, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg__setitem(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key,std::map< std::string,double >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg__ContainsKey(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
        std::map< std::string, double, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg__Add(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key,std::map< std::string,double >::mapped_type const &value){
        std::map< std::string, double, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, double >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg__Remove(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
        std::map< std::string, double, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,double,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_double_Sg__create_iterator_begin(std::map< std::string,double > *self){
        return new std::map< std::string, double, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,double >::key_type const &std_map_Sl_std_string_Sc_double_Sg__get_next_key(std::map< std::string,double > *self,std::map< std::string,double,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, double, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg__destroy_iterator(std::map< std::string,double > *self,std::map< std::string,double,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,char >::mapped_type const &std_map_Sl_std_string_Sc_char_Sg__getitem(std::map< std::string,char > *self,std::map< std::string,char >::key_type const &key){
        std::map< std::string, char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_char_Sg__setitem(std::map< std::string,char > *self,std::map< std::string,char >::key_type const &key,std::map< std::string,char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_char_Sg__ContainsKey(std::map< std::string,char > *self,std::map< std::string,char >::key_type const &key){
        std::map< std::string, char, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_char_Sg__Add(std::map< std::string,char > *self,std::map< std::string,char >::key_type const &key,std::map< std::string,char >::mapped_type const &value){
        std::map< std::string, char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, char >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_char_Sg__Remove(std::map< std::string,char > *self,std::map< std::string,char >::key_type const &key){
        std::map< std::string, char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,char,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_char_Sg__create_iterator_begin(std::map< std::string,char > *self){
        return new std::map< std::string, char, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,char >::key_type const &std_map_Sl_std_string_Sc_char_Sg__get_next_key(std::map< std::string,char > *self,std::map< std::string,char,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, char, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_char_Sg__destroy_iterator(std::map< std::string,char > *self,std::map< std::string,char,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,unsigned char >::mapped_type const &std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__getitem(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char >::key_type const &key){
        std::map< std::string, unsigned char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__setitem(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char >::key_type const &key,std::map< std::string,unsigned char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__ContainsKey(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char >::key_type const &key){
        std::map< std::string, unsigned char, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__Add(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char >::key_type const &key,std::map< std::string,unsigned char >::mapped_type const &value){
        std::map< std::string, unsigned char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, unsigned char >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__Remove(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char >::key_type const &key){
        std::map< std::string, unsigned char, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,unsigned char,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__create_iterator_begin(std::map< std::string,unsigned char > *self){
        return new std::map< std::string, unsigned char, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,unsigned char >::key_type const &std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__get_next_key(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, unsigned char, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__destroy_iterator(std::map< std::string,unsigned char > *self,std::map< std::string,unsigned char,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,std::string >::mapped_type const &std_map_Sl_int_Sc_std_string_Sg__getitem(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__setitem(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__ContainsKey(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__Add(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &value){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__Remove(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,std::string,std::less< int > >::iterator *std_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(std::map< int,std::string > *self){
        return new std::map< int, std::string, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,std::string >::key_type const &std_map_Sl_int_Sc_std_string_Sg__get_next_key(std::map< int,std::string > *self,std::map< int,std::string,std::less< int > >::iterator *swigiterator){
        std::map< int, std::string, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__destroy_iterator(std::map< int,std::string > *self,std::map< int,std::string,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,int >::mapped_type const &std_map_Sl_int_Sc_int_Sg__getitem(std::map< int,int > *self,std::map< int,int >::key_type const &key){
        std::map< int, int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__setitem(std::map< int,int > *self,std::map< int,int >::key_type const &key,std::map< int,int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__ContainsKey(std::map< int,int > *self,std::map< int,int >::key_type const &key){
        std::map< int, int, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__Add(std::map< int,int > *self,std::map< int,int >::key_type const &key,std::map< int,int >::mapped_type const &value){
        std::map< int, int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, int >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__Remove(std::map< int,int > *self,std::map< int,int >::key_type const &key){
        std::map< int, int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,int,std::less< int > >::iterator *std_map_Sl_int_Sc_int_Sg__create_iterator_begin(std::map< int,int > *self){
        return new std::map< int, int, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,int >::key_type const &std_map_Sl_int_Sc_int_Sg__get_next_key(std::map< int,int > *self,std::map< int,int,std::less< int > >::iterator *swigiterator){
        std::map< int, int, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__destroy_iterator(std::map< int,int > *self,std::map< int,int,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,unsigned int >::mapped_type const &std_map_Sl_int_Sc_uint32_t_Sg__getitem(std::map< int,uint32_t > *self,std::map< int,unsigned int >::key_type const &key){
        std::map< int, unsigned int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_uint32_t_Sg__setitem(std::map< int,uint32_t > *self,std::map< int,unsigned int >::key_type const &key,std::map< int,unsigned int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_uint32_t_Sg__ContainsKey(std::map< int,uint32_t > *self,std::map< int,unsigned int >::key_type const &key){
        std::map< int, unsigned int, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_uint32_t_Sg__Add(std::map< int,uint32_t > *self,std::map< int,unsigned int >::key_type const &key,std::map< int,unsigned int >::mapped_type const &value){
        std::map< int, unsigned int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, unsigned int >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_uint32_t_Sg__Remove(std::map< int,uint32_t > *self,std::map< int,unsigned int >::key_type const &key){
        std::map< int, unsigned int, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,unsigned int,std::less< int > >::iterator *std_map_Sl_int_Sc_uint32_t_Sg__create_iterator_begin(std::map< int,uint32_t > *self){
        return new std::map< int, unsigned int, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,unsigned int >::key_type const &std_map_Sl_int_Sc_uint32_t_Sg__get_next_key(std::map< int,uint32_t > *self,std::map< int,unsigned int,std::less< int > >::iterator *swigiterator){
        std::map< int, unsigned int, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_uint32_t_Sg__destroy_iterator(std::map< int,uint32_t > *self,std::map< int,unsigned int,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,long long >::mapped_type const &std_map_Sl_int_Sc_int64_t_Sg__getitem(std::map< int,int64_t > *self,std::map< int,long long >::key_type const &key){
        std::map< int, long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_int64_t_Sg__setitem(std::map< int,int64_t > *self,std::map< int,long long >::key_type const &key,std::map< int,long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_int64_t_Sg__ContainsKey(std::map< int,int64_t > *self,std::map< int,long long >::key_type const &key){
        std::map< int, long long, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_int64_t_Sg__Add(std::map< int,int64_t > *self,std::map< int,long long >::key_type const &key,std::map< int,long long >::mapped_type const &value){
        std::map< int, long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_int64_t_Sg__Remove(std::map< int,int64_t > *self,std::map< int,long long >::key_type const &key){
        std::map< int, long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,long long,std::less< int > >::iterator *std_map_Sl_int_Sc_int64_t_Sg__create_iterator_begin(std::map< int,int64_t > *self){
        return new std::map< int, long long, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,long long >::key_type const &std_map_Sl_int_Sc_int64_t_Sg__get_next_key(std::map< int,int64_t > *self,std::map< int,long long,std::less< int > >::iterator *swigiterator){
        std::map< int, long long, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_int64_t_Sg__destroy_iterator(std::map< int,int64_t > *self,std::map< int,long long,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,unsigned long long >::mapped_type const &std_map_Sl_int_Sc_uint64_t_Sg__getitem(std::map< int,uint64_t > *self,std::map< int,unsigned long long >::key_type const &key){
        std::map< int, unsigned long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_uint64_t_Sg__setitem(std::map< int,uint64_t > *self,std::map< int,unsigned long long >::key_type const &key,std::map< int,unsigned long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_uint64_t_Sg__ContainsKey(std::map< int,uint64_t > *self,std::map< int,unsigned long long >::key_type const &key){
        std::map< int, unsigned long long, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_uint64_t_Sg__Add(std::map< int,uint64_t > *self,std::map< int,unsigned long long >::key_type const &key,std::map< int,unsigned long long >::mapped_type const &value){
        std::map< int, unsigned long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, unsigned long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_uint64_t_Sg__Remove(std::map< int,uint64_t > *self,std::map< int,unsigned long long >::key_type const &key){
        std::map< int, unsigned long long, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,unsigned long long,std::less< int > >::iterator *std_map_Sl_int_Sc_uint64_t_Sg__create_iterator_begin(std::map< int,uint64_t > *self){
        return new std::map< int, unsigned long long, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,unsigned long long >::key_type const &std_map_Sl_int_Sc_uint64_t_Sg__get_next_key(std::map< int,uint64_t > *self,std::map< int,unsigned long long,std::less< int > >::iterator *swigiterator){
        std::map< int, unsigned long long, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_uint64_t_Sg__destroy_iterator(std::map< int,uint64_t > *self,std::map< int,unsigned long long,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,double >::mapped_type const &std_map_Sl_int_Sc_double_Sg__getitem(std::map< int,double > *self,std::map< int,double >::key_type const &key){
        std::map< int, double, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_double_Sg__setitem(std::map< int,double > *self,std::map< int,double >::key_type const &key,std::map< int,double >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_double_Sg__ContainsKey(std::map< int,double > *self,std::map< int,double >::key_type const &key){
        std::map< int, double, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_double_Sg__Add(std::map< int,double > *self,std::map< int,double >::key_type const &key,std::map< int,double >::mapped_type const &value){
        std::map< int, double, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, double >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_double_Sg__Remove(std::map< int,double > *self,std::map< int,double >::key_type const &key){
        std::map< int, double, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,double,std::less< int > >::iterator *std_map_Sl_int_Sc_double_Sg__create_iterator_begin(std::map< int,double > *self){
        return new std::map< int, double, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,double >::key_type const &std_map_Sl_int_Sc_double_Sg__get_next_key(std::map< int,double > *self,std::map< int,double,std::less< int > >::iterator *swigiterator){
        std::map< int, double, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_double_Sg__destroy_iterator(std::map< int,double > *self,std::map< int,double,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,char >::mapped_type const &std_map_Sl_int_Sc_char_Sg__getitem(std::map< int,char > *self,std::map< int,char >::key_type const &key){
        std::map< int, char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_char_Sg__setitem(std::map< int,char > *self,std::map< int,char >::key_type const &key,std::map< int,char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_char_Sg__ContainsKey(std::map< int,char > *self,std::map< int,char >::key_type const &key){
        std::map< int, char, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_char_Sg__Add(std::map< int,char > *self,std::map< int,char >::key_type const &key,std::map< int,char >::mapped_type const &value){
        std::map< int, char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, char >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_char_Sg__Remove(std::map< int,char > *self,std::map< int,char >::key_type const &key){
        std::map< int, char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,char,std::less< int > >::iterator *std_map_Sl_int_Sc_char_Sg__create_iterator_begin(std::map< int,char > *self){
        return new std::map< int, char, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,char >::key_type const &std_map_Sl_int_Sc_char_Sg__get_next_key(std::map< int,char > *self,std::map< int,char,std::less< int > >::iterator *swigiterator){
        std::map< int, char, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_char_Sg__destroy_iterator(std::map< int,char > *self,std::map< int,char,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,unsigned char >::mapped_type const &std_map_Sl_int_Sc_unsigned_SS_char_Sg__getitem(std::map< int,unsigned char > *self,std::map< int,unsigned char >::key_type const &key){
        std::map< int, unsigned char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_unsigned_SS_char_Sg__setitem(std::map< int,unsigned char > *self,std::map< int,unsigned char >::key_type const &key,std::map< int,unsigned char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_unsigned_SS_char_Sg__ContainsKey(std::map< int,unsigned char > *self,std::map< int,unsigned char >::key_type const &key){
        std::map< int, unsigned char, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_unsigned_SS_char_Sg__Add(std::map< int,unsigned char > *self,std::map< int,unsigned char >::key_type const &key,std::map< int,unsigned char >::mapped_type const &value){
        std::map< int, unsigned char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, unsigned char >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_unsigned_SS_char_Sg__Remove(std::map< int,unsigned char > *self,std::map< int,unsigned char >::key_type const &key){
        std::map< int, unsigned char, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,unsigned char,std::less< int > >::iterator *std_map_Sl_int_Sc_unsigned_SS_char_Sg__create_iterator_begin(std::map< int,unsigned char > *self){
        return new std::map< int, unsigned char, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,unsigned char >::key_type const &std_map_Sl_int_Sc_unsigned_SS_char_Sg__get_next_key(std::map< int,unsigned char > *self,std::map< int,unsigned char,std::less< int > >::iterator *swigiterator){
        std::map< int, unsigned char, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_unsigned_SS_char_Sg__destroy_iterator(std::map< int,unsigned char > *self,std::map< int,unsigned char,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,std::string >::mapped_type const &std_map_Sl_int64_t_Sc_std_string_Sg__getitem(std::map< int64_t,std::string > *self,std::map< long long,std::string >::key_type const &key){
        std::map< long long, std::string, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_std_string_Sg__setitem(std::map< int64_t,std::string > *self,std::map< long long,std::string >::key_type const &key,std::map< long long,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_std_string_Sg__ContainsKey(std::map< int64_t,std::string > *self,std::map< long long,std::string >::key_type const &key){
        std::map< long long, std::string, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_std_string_Sg__Add(std::map< int64_t,std::string > *self,std::map< long long,std::string >::key_type const &key,std::map< long long,std::string >::mapped_type const &value){
        std::map< long long, std::string, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_std_string_Sg__Remove(std::map< int64_t,std::string > *self,std::map< long long,std::string >::key_type const &key){
        std::map< long long, std::string, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,std::string,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_std_string_Sg__create_iterator_begin(std::map< int64_t,std::string > *self){
        return new std::map< long long, std::string, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,std::string >::key_type const &std_map_Sl_int64_t_Sc_std_string_Sg__get_next_key(std::map< int64_t,std::string > *self,std::map< long long,std::string,std::less< long long > >::iterator *swigiterator){
        std::map< long long, std::string, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_std_string_Sg__destroy_iterator(std::map< int64_t,std::string > *self,std::map< long long,std::string,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,int >::mapped_type const &std_map_Sl_int64_t_Sc_int_Sg__getitem(std::map< int64_t,int > *self,std::map< long long,int >::key_type const &key){
        std::map< long long, int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int_Sg__setitem(std::map< int64_t,int > *self,std::map< long long,int >::key_type const &key,std::map< long long,int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_int_Sg__ContainsKey(std::map< int64_t,int > *self,std::map< long long,int >::key_type const &key){
        std::map< long long, int, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int_Sg__Add(std::map< int64_t,int > *self,std::map< long long,int >::key_type const &key,std::map< long long,int >::mapped_type const &value){
        std::map< long long, int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, int >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_int_Sg__Remove(std::map< int64_t,int > *self,std::map< long long,int >::key_type const &key){
        std::map< long long, int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,int,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_int_Sg__create_iterator_begin(std::map< int64_t,int > *self){
        return new std::map< long long, int, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,int >::key_type const &std_map_Sl_int64_t_Sc_int_Sg__get_next_key(std::map< int64_t,int > *self,std::map< long long,int,std::less< long long > >::iterator *swigiterator){
        std::map< long long, int, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int_Sg__destroy_iterator(std::map< int64_t,int > *self,std::map< long long,int,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,unsigned int >::mapped_type const &std_map_Sl_int64_t_Sc_uint32_t_Sg__getitem(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int >::key_type const &key){
        std::map< long long, unsigned int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint32_t_Sg__setitem(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int >::key_type const &key,std::map< long long,unsigned int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_uint32_t_Sg__ContainsKey(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int >::key_type const &key){
        std::map< long long, unsigned int, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint32_t_Sg__Add(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int >::key_type const &key,std::map< long long,unsigned int >::mapped_type const &value){
        std::map< long long, unsigned int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, unsigned int >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_uint32_t_Sg__Remove(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int >::key_type const &key){
        std::map< long long, unsigned int, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,unsigned int,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_uint32_t_Sg__create_iterator_begin(std::map< int64_t,uint32_t > *self){
        return new std::map< long long, unsigned int, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,unsigned int >::key_type const &std_map_Sl_int64_t_Sc_uint32_t_Sg__get_next_key(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int,std::less< long long > >::iterator *swigiterator){
        std::map< long long, unsigned int, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint32_t_Sg__destroy_iterator(std::map< int64_t,uint32_t > *self,std::map< long long,unsigned int,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,long long >::mapped_type const &std_map_Sl_int64_t_Sc_int64_t_Sg__getitem(std::map< int64_t,int64_t > *self,std::map< long long,long long >::key_type const &key){
        std::map< long long, long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int64_t_Sg__setitem(std::map< int64_t,int64_t > *self,std::map< long long,long long >::key_type const &key,std::map< long long,long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_int64_t_Sg__ContainsKey(std::map< int64_t,int64_t > *self,std::map< long long,long long >::key_type const &key){
        std::map< long long, long long, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int64_t_Sg__Add(std::map< int64_t,int64_t > *self,std::map< long long,long long >::key_type const &key,std::map< long long,long long >::mapped_type const &value){
        std::map< long long, long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_int64_t_Sg__Remove(std::map< int64_t,int64_t > *self,std::map< long long,long long >::key_type const &key){
        std::map< long long, long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,long long,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_int64_t_Sg__create_iterator_begin(std::map< int64_t,int64_t > *self){
        return new std::map< long long, long long, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,long long >::key_type const &std_map_Sl_int64_t_Sc_int64_t_Sg__get_next_key(std::map< int64_t,int64_t > *self,std::map< long long,long long,std::less< long long > >::iterator *swigiterator){
        std::map< long long, long long, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_int64_t_Sg__destroy_iterator(std::map< int64_t,int64_t > *self,std::map< long long,long long,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,unsigned long long >::mapped_type const &std_map_Sl_int64_t_Sc_uint64_t_Sg__getitem(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long >::key_type const &key){
        std::map< long long, unsigned long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint64_t_Sg__setitem(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long >::key_type const &key,std::map< long long,unsigned long long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_uint64_t_Sg__ContainsKey(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long >::key_type const &key){
        std::map< long long, unsigned long long, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint64_t_Sg__Add(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long >::key_type const &key,std::map< long long,unsigned long long >::mapped_type const &value){
        std::map< long long, unsigned long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, unsigned long long >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_uint64_t_Sg__Remove(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long >::key_type const &key){
        std::map< long long, unsigned long long, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,unsigned long long,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_uint64_t_Sg__create_iterator_begin(std::map< int64_t,uint64_t > *self){
        return new std::map< long long, unsigned long long, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,unsigned long long >::key_type const &std_map_Sl_int64_t_Sc_uint64_t_Sg__get_next_key(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long,std::less< long long > >::iterator *swigiterator){
        std::map< long long, unsigned long long, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_uint64_t_Sg__destroy_iterator(std::map< int64_t,uint64_t > *self,std::map< long long,unsigned long long,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,double >::mapped_type const &std_map_Sl_int64_t_Sc_double_Sg__getitem(std::map< int64_t,double > *self,std::map< long long,double >::key_type const &key){
        std::map< long long, double, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_double_Sg__setitem(std::map< int64_t,double > *self,std::map< long long,double >::key_type const &key,std::map< long long,double >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_double_Sg__ContainsKey(std::map< int64_t,double > *self,std::map< long long,double >::key_type const &key){
        std::map< long long, double, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_double_Sg__Add(std::map< int64_t,double > *self,std::map< long long,double >::key_type const &key,std::map< long long,double >::mapped_type const &value){
        std::map< long long, double, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, double >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_double_Sg__Remove(std::map< int64_t,double > *self,std::map< long long,double >::key_type const &key){
        std::map< long long, double, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,double,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_double_Sg__create_iterator_begin(std::map< int64_t,double > *self){
        return new std::map< long long, double, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,double >::key_type const &std_map_Sl_int64_t_Sc_double_Sg__get_next_key(std::map< int64_t,double > *self,std::map< long long,double,std::less< long long > >::iterator *swigiterator){
        std::map< long long, double, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_double_Sg__destroy_iterator(std::map< int64_t,double > *self,std::map< long long,double,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,char >::mapped_type const &std_map_Sl_int64_t_Sc_char_Sg__getitem(std::map< int64_t,char > *self,std::map< long long,char >::key_type const &key){
        std::map< long long, char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_char_Sg__setitem(std::map< int64_t,char > *self,std::map< long long,char >::key_type const &key,std::map< long long,char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_char_Sg__ContainsKey(std::map< int64_t,char > *self,std::map< long long,char >::key_type const &key){
        std::map< long long, char, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_char_Sg__Add(std::map< int64_t,char > *self,std::map< long long,char >::key_type const &key,std::map< long long,char >::mapped_type const &value){
        std::map< long long, char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, char >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_char_Sg__Remove(std::map< int64_t,char > *self,std::map< long long,char >::key_type const &key){
        std::map< long long, char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,char,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_char_Sg__create_iterator_begin(std::map< int64_t,char > *self){
        return new std::map< long long, char, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,char >::key_type const &std_map_Sl_int64_t_Sc_char_Sg__get_next_key(std::map< int64_t,char > *self,std::map< long long,char,std::less< long long > >::iterator *swigiterator){
        std::map< long long, char, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_char_Sg__destroy_iterator(std::map< int64_t,char > *self,std::map< long long,char,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< long long,unsigned char >::mapped_type const &std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__getitem(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char >::key_type const &key){
        std::map< long long, unsigned char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__setitem(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char >::key_type const &key,std::map< long long,unsigned char >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__ContainsKey(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char >::key_type const &key){
        std::map< long long, unsigned char, std::less< long long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__Add(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char >::key_type const &key,std::map< long long,unsigned char >::mapped_type const &value){
        std::map< long long, unsigned char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< long long, unsigned char >(key, value));
      }
SWIGINTERN bool std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__Remove(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char >::key_type const &key){
        std::map< long long, unsigned char, std::less< long long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< long long,unsigned char,std::less< long long > >::iterator *std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__create_iterator_begin(std::map< int64_t,unsigned char > *self){
        return new std::map< long long, unsigned char, std::less< long long > >::iterator(self->begin());
      }
SWIGINTERN std::map< long long,unsigned char >::key_type const &std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__get_next_key(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char,std::less< long long > >::iterator *swigiterator){
        std::map< long long, unsigned char, std::less< long long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__destroy_iterator(std::map< int64_t,unsigned char > *self,std::map< long long,unsigned char,std::less< long long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type const &std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__getitem(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &key){
        std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__setitem(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &key,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__ContainsKey(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &key){
        std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__Add(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &key,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type const &value){
        std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::pair< uint64_t,uint64_t > >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__Remove(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &key){
        std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__create_iterator_begin(std::map< std::string,std::pair< uint64_t,uint64_t > > *self){
        return new std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type const &std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__get_next_key(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, std::pair< uint64_t,uint64_t >, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__destroy_iterator(std::map< std::string,std::pair< uint64_t,uint64_t > > *self,std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,std::pair< long long,long long > >::mapped_type const &std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__getitem(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< long long,long long > >::key_type const &key){
        std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__setitem(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< long long,long long > >::key_type const &key,std::map< std::string,std::pair< long long,long long > >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__ContainsKey(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< long long,long long > >::key_type const &key){
        std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__Add(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< long long,long long > >::key_type const &key,std::map< std::string,std::pair< long long,long long > >::mapped_type const &value){
        std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::pair< int64_t,int64_t > >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__Remove(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< long long,long long > >::key_type const &key){
        std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__create_iterator_begin(std::map< std::string,std::pair< int64_t,int64_t > > *self){
        return new std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::pair< long long,long long > >::key_type const &std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__get_next_key(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, std::pair< int64_t,int64_t >, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__destroy_iterator(std::map< std::string,std::pair< int64_t,int64_t > > *self,std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }

#include "tiledb_cxx_exception.h"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



#include "tiledb_cxx_array.h"

#include "tiledb_cxx_array_schema.h"

#include "tiledb_cxx_array_util.h"

#include "tiledb_cxx_attribute.h"

#include "tiledb_cxx_config.h"

#include "tiledb_cxx_context.h"

#include "tiledb_cxx_dimension.h"

#include "tiledb_cxx_domain.h"

#include "tiledb_cxx_enum.h"

#include "tiledb_cxx_filter.h"

#include "tiledb_cxx_filter_list.h"

#include "tiledb_cxx_group.h"

#include "tiledb_cxx_query.h"

#include "tiledb_cxx_query_condition.h"

#include "tiledb_cxx_stats.h"

#include "tiledb_cxx_version.h"

#include "tiledb_cxx_vfs.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorInt32_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt32__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt32__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt32_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt32_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorInt32_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorInt32_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt32_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorInt32_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt32_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt32_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorInt32_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorInt32(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_Clear(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_Add(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUInt32_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt32__SWIG_0() {
  void * jresult ;
  std::vector< unsigned int > *result = 0 ;
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt32__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned int > *)new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt32_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt32_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_int_Sg__AddRange(arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUInt32_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__Insert(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__InsertRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUInt32_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  int arg2 ;
  unsigned int temp1 ;
  std::vector< unsigned int > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__Repeat((unsigned int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt32_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__SetRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt32_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Contains(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUInt32_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_int_Sg__IndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUInt32_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt32_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorUInt32(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_Clear(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_Add(void * jarg1, long long jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((long long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  result = ((std::vector< int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorInt64_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  result = ((std::vector< int64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt64__SWIG_0() {
  void * jresult ;
  std::vector< int64_t > *result = 0 ;
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int64_t > *arg1 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int64_t > *)new std::vector< int64_t >((std::vector< int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorInt64__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int64_t > *)new_std_vector_Sl_int64_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_VectorInt64_getitemcopy(void * jarg1, int jarg2) {
  long long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (long long)std_vector_Sl_int64_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_VectorInt64_getitem(void * jarg1, int jarg2) {
  long long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_int64_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_setitem(void * jarg1, int jarg2, long long jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int64_t_Sg__setitem(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_AddRange(void * jarg1, void * jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (std::vector< long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int64_t_Sg__AddRange(arg1,(std::vector< long long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorInt64_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< long long > *)std_vector_Sl_int64_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_Insert(void * jarg1, int jarg2, long long jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int64_t_Sg__Insert(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long > *arg3 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int64_t_Sg__InsertRange(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int64_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int64_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorInt64_Repeat(long long jarg1, int jarg2) {
  void * jresult ;
  long long *arg1 = 0 ;
  int arg2 ;
  long long temp1 ;
  std::vector< long long > *result = 0 ;
  
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long long > *)std_vector_Sl_int64_t_Sg__Repeat((long long const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_Reverse__SWIG_0(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  std_vector_Sl_int64_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int64_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorInt64_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long > *arg3 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int64_t_Sg__SetRange(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorInt64_Contains(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  bool result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int64_t_Sg__Contains(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt64_IndexOf(void * jarg1, long long jarg2) {
  int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  int result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int64_t_Sg__IndexOf(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorInt64_LastIndexOf(void * jarg1, long long jarg2) {
  int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  int result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int64_t_Sg__LastIndexOf(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorInt64_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  bool result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int64_t_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorInt64(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_Clear(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_Add(void * jarg1, unsigned long long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned long long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUInt64_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt64__SWIG_0() {
  void * jresult ;
  std::vector< uint64_t > *result = 0 ;
  
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >((std::vector< uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUInt64__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint64_t > *)new_std_vector_Sl_uint64_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_VectorUInt64_getitemcopy(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned long long)std_vector_Sl_uint64_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_VectorUInt64_getitem(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long >::value_type *) &std_vector_Sl_uint64_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_setitem(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__setitem(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint64_t_Sg__AddRange(arg1,(std::vector< unsigned long long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUInt64_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_uint64_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_Insert(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__Insert(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUInt64_Repeat(unsigned long long jarg1, int jarg2) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  int arg2 ;
  unsigned long long temp1 ;
  std::vector< unsigned long long > *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_uint64_t_Sg__Repeat((unsigned long long const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUInt64_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt64_Contains(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Contains(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUInt64_IndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__IndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUInt64_LastIndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__LastIndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUInt64_Remove(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Remove(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorUInt64(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_Clear(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_Add(void * jarg1, char jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorChar_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorChar_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorChar__SWIG_0() {
  void * jresult ;
  std::vector< char > *result = 0 ;
  
  result = (std::vector< char > *)new std::vector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorChar__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_TileDB_VectorChar_getitemcopy(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char)std_vector_Sl_char_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_TileDB_VectorChar_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_setitem(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__setitem(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_AddRange(void * jarg1, void * jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_char_Sg__AddRange(arg1,(std::vector< char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorChar_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_Insert(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__Insert(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__InsertRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorChar_Repeat(char jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = 0 ;
  int arg2 ;
  char temp1 ;
  std::vector< char > *result = 0 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__Repeat((char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_Reverse__SWIG_0(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  std_vector_Sl_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorChar_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__SetRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorChar_Contains(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Contains(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorChar_IndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__IndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorChar_LastIndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__LastIndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorChar_Remove(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Remove(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorChar(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_Clear(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_Add(void * jarg1, unsigned char jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUChar_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorUChar_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUChar__SWIG_0() {
  void * jresult ;
  std::vector< unsigned char > *result = 0 ;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorUChar__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned char > *)new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TileDB_VectorUChar_getitemcopy(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TileDB_VectorUChar_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_char_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUChar_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_Insert(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorUChar_Repeat(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__Repeat((unsigned char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorUChar_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUChar_Contains(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUChar_IndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorUChar_LastIndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorUChar_Remove(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorUChar(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorDouble_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorDouble_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorDouble__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorDouble__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorDouble__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_VectorDouble_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_VectorDouble_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorDouble_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorDouble_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorDouble_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorDouble_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorDouble_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorDouble_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorDouble_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorDouble(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorString_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorString_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorString__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_VectorString_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_VectorString_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorString_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorString_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorString_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorString_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorString_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorString_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorString_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorString(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_Clear(void * jarg1) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_Add(void * jarg1, char * jarg2) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  
  temp2 = (char *)jarg2;
  arg2 = &temp2;
  
  (arg1)->push_back((char const *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorConstChar_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * >::size_type result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  result = ((std::vector< char const * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorConstChar_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * >::size_type result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  result = ((std::vector< char const * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * >::size_type arg2 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (std::vector< char const * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorConstChar__SWIG_0() {
  void * jresult ;
  std::vector< char const * > *result = 0 ;
  
  result = (std::vector< char const * > *)new std::vector< char const * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorConstChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char const * > *arg1 = 0 ;
  std::vector< char const * > *result = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char const * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< char const * > *)new std::vector< char const * >((std::vector< char const * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorConstChar__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char const * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char const * > *)new_std_vector_Sl_char_SS_const_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_VectorConstChar_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char *)std_vector_Sl_char_SS_const_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_VectorConstChar_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  std::vector< char const * >::value_type *result = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char const * >::value_type *) &std_vector_Sl_char_SS_const_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  if (result) jresult = SWIG_csharp_string_callback((const char *)*result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  char **arg3 = 0 ;
  char *temp3 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  
  temp3 = (char *)jarg3;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__setitem(arg1,arg2,(char const *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_AddRange(void * jarg1, void * jarg2) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * > *arg2 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (std::vector< char const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char const * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_char_SS_const_Sm__Sg__AddRange(arg1,(std::vector< char const * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorConstChar_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char const * > *result = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char const * > *)std_vector_Sl_char_SS_const_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  char **arg3 = 0 ;
  char *temp3 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  
  temp3 = (char *)jarg3;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__Insert(arg1,arg2,(char const *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  std::vector< char const * > *arg3 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char const * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char const * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__InsertRange(arg1,arg2,(std::vector< char const * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorConstChar_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  char **arg1 = 0 ;
  int arg2 ;
  char *temp1 = 0 ;
  std::vector< char const * > *result = 0 ;
  
  
  temp1 = (char *)jarg1;
  arg1 = &temp1;
  
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char const * > *)std_vector_Sl_char_SS_const_Sm__Sg__Repeat((char const *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_Reverse__SWIG_0(void * jarg1) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  std_vector_Sl_char_SS_const_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorConstChar_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  std::vector< char const * > *arg3 = 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char const * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char const * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_SS_const_Sm__Sg__SetRange(arg1,arg2,(std::vector< char const * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorConstChar_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  
  temp2 = (char *)jarg2;
  arg2 = &temp2;
  
  result = (bool)std_vector_Sl_char_SS_const_Sm__Sg__Contains(arg1,(char const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorConstChar_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  
  temp2 = (char *)jarg2;
  arg2 = &temp2;
  
  result = (int)std_vector_Sl_char_SS_const_Sm__Sg__IndexOf(arg1,(char const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_VectorConstChar_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  
  temp2 = (char *)jarg2;
  arg2 = &temp2;
  
  result = (int)std_vector_Sl_char_SS_const_Sm__Sg__LastIndexOf(arg1,(char const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VectorConstChar_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  
  temp2 = (char *)jarg2;
  arg2 = &temp2;
  
  result = (bool)std_vector_Sl_char_SS_const_Sm__Sg__Remove(arg1,(char const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorConstChar(void * jarg1) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  arg1 = (std::vector< char const * > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Clear(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< int > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< std::vector< int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt32__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< int > > *result = 0 ;
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt32__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< int > > *)new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__setitem(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__AddRange(arg1,(std::vector< std::vector< int > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< int > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__Insert(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< int > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__Repeat((std::vector< int > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt32_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorInt32(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Clear(void * jarg1) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< std::vector< unsigned int > >::size_type result;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  result = ((std::vector< std::vector< unsigned int > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< std::vector< unsigned int > >::size_type result;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  result = ((std::vector< std::vector< unsigned int > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< std::vector< unsigned int > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (std::vector< std::vector< unsigned int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt32__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = 0 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned int > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >((std::vector< std::vector< unsigned int > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt32__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< unsigned int > > *)new_std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > result;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned int > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< unsigned int > >::value_type *) &std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__setitem(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (std::vector< std::vector< unsigned int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned int > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__AddRange(arg1,(std::vector< std::vector< unsigned int > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< unsigned int > > *)std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Insert(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< unsigned int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< unsigned int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< unsigned int > > *)std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Repeat((std::vector< unsigned int > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt32_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< unsigned int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< unsigned int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorUInt32(void * jarg1) {
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned int > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Clear(void * jarg1) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (std::vector< int64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< int64_t > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  std::vector< std::vector< long long > >::size_type result;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  result = ((std::vector< std::vector< int64_t > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  std::vector< std::vector< long long > >::size_type result;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  result = ((std::vector< std::vector< int64_t > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  std::vector< std::vector< long long > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (std::vector< std::vector< long long > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt64__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< int64_t > > *result = 0 ;
  
  result = (std::vector< std::vector< int64_t > > *)new std::vector< std::vector< int64_t > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< int64_t > > *arg1 = 0 ;
  std::vector< std::vector< int64_t > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int64_t > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< int64_t > > *)new std::vector< std::vector< int64_t > >((std::vector< std::vector< int64_t > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorInt64__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< int64_t > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< int64_t > > *)new_std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< int64_t > result;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< int64_t >((const std::vector< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< long long > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< long long > >::value_type *) &std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__setitem(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  std::vector< std::vector< int64_t > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (std::vector< std::vector< int64_t > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int64_t > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__AddRange(arg1,(std::vector< std::vector< long long > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< int64_t > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< int64_t > > *)std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Insert(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int64_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int64_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int64_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< long long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< int64_t > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< int64_t > > *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< int64_t > > *)std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Repeat((std::vector< long long > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorInt64_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int64_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int64_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int64_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int64_t_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< long long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorInt64(void * jarg1) {
  std::vector< std::vector< int64_t > > *arg1 = (std::vector< std::vector< int64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int64_t > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Clear(void * jarg1) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (std::vector< uint64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< uint64_t > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  std::vector< std::vector< unsigned long long > >::size_type result;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  result = ((std::vector< std::vector< uint64_t > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  std::vector< std::vector< unsigned long long > >::size_type result;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  result = ((std::vector< std::vector< uint64_t > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  std::vector< std::vector< unsigned long long > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (std::vector< std::vector< unsigned long long > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt64__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< uint64_t > > *result = 0 ;
  
  result = (std::vector< std::vector< uint64_t > > *)new std::vector< std::vector< uint64_t > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = 0 ;
  std::vector< std::vector< uint64_t > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< uint64_t > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< uint64_t > > *)new std::vector< std::vector< uint64_t > >((std::vector< std::vector< uint64_t > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUInt64__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< uint64_t > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< uint64_t > > *)new_std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< uint64_t > result;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned long long > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< unsigned long long > >::value_type *) &std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< uint64_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__setitem(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  std::vector< std::vector< uint64_t > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (std::vector< std::vector< uint64_t > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< uint64_t > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__AddRange(arg1,(std::vector< std::vector< unsigned long long > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< uint64_t > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< uint64_t > > *)std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< uint64_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Insert(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint64_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< uint64_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< uint64_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< unsigned long long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< uint64_t > > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< uint64_t > > *)std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Repeat((std::vector< unsigned long long > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUInt64_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint64_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< uint64_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< uint64_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint64_t_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< unsigned long long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorUInt64(void * jarg1) {
  std::vector< std::vector< uint64_t > > *arg1 = (std::vector< std::vector< uint64_t > > *) 0 ;
  
  arg1 = (std::vector< std::vector< uint64_t > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Clear(void * jarg1) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< char > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type result;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  result = ((std::vector< std::vector< char > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type result;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  result = ((std::vector< std::vector< char > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (std::vector< std::vector< char > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorChar__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< char > > *result = 0 ;
  
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< char > > *arg1 = 0 ;
  std::vector< std::vector< char > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< char > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >((std::vector< std::vector< char > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorChar__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< char > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< char > > *)new_std_vector_Sl_std_vector_Sl_char_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< char > result;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_char_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< char > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< char > >::value_type *) &std_vector_Sl_std_vector_Sl_char_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__setitem(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (std::vector< std::vector< char > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< char > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_char_Sg__Sg__AddRange(arg1,(std::vector< std::vector< char > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< char > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< char > > *)std_vector_Sl_std_vector_Sl_char_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__Insert(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< char > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< char > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< char > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< char > > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< char > > *)std_vector_Sl_std_vector_Sl_char_Sg__Sg__Repeat((std::vector< char > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_char_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorChar_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< char > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< char > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< char > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorChar(void * jarg1) {
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< char > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Clear(void * jarg1) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (std::vector< std::vector< unsigned char > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUChar__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = 0 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned char > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >((std::vector< std::vector< unsigned char > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorUChar__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< unsigned char > > *)new_std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > result;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< unsigned char >((const std::vector< unsigned char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< unsigned char > >::value_type *) &std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__setitem(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (std::vector< std::vector< unsigned char > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned char > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__AddRange(arg1,(std::vector< std::vector< unsigned char > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< unsigned char > > *)std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Insert(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned char > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< unsigned char > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned char > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< unsigned char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< unsigned char > > *)std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Repeat((std::vector< unsigned char > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorUChar_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned char > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< unsigned char > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< unsigned char > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< unsigned char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorUChar(void * jarg1) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  arg1 = (std::vector< std::vector< unsigned char > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Clear(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< double > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorDouble__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< double > > *result = 0 ;
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorDouble__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorDouble__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< double > > *)new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(arg1,(std::vector< std::vector< double > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat((std::vector< double > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorDouble_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorDouble(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Clear(void * jarg1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  result = ((std::vector< std::vector< std::string > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  result = ((std::vector< std::vector< std::string > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (std::vector< std::vector< std::string > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorString__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< std::string > > *arg1 = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< std::string > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >((std::vector< std::vector< std::string > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VectorOfVectorString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< std::string > > *)new_std_vector_Sl_std_vector_Sl_std_string_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::string > result;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::string > >::value_type *) &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__setitem(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (std::vector< std::vector< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< std::string > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__AddRange(arg1,(std::vector< std::vector< std::string > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< std::string > > *)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Insert(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< std::string > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< std::string > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::string > > *)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Repeat((std::vector< std::string > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VectorOfVectorString_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< std::string > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< std::string > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VectorOfVectorString(void * jarg1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  arg1 = (std::vector< std::vector< std::string > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringString__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringString_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringString_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringString_Clear(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringString_getitem(void * jarg1, char * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringString_setitem(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_std_string_Sc_std_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringString_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringString_Add(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringString_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringString_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (std::map< std::string,std::string,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringString_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,std::string >::key_type *) &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringString_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringString(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringInt32__SWIG_0() {
  void * jresult ;
  std::map< std::string,int > *result = 0 ;
  
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,int > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::size_type result;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  result = ((std::map< std::string,int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt32_Clear(void * jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapStringInt32_getitem(void * jarg1, char * jarg2) {
  int jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::map< std::string,int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,int >::mapped_type *) &std_map_Sl_std_string_Sc_int_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt32_setitem(void * jarg1, char * jarg2, int jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::map< std::string,int >::mapped_type *arg3 = 0 ;
  std::map< std::string,int >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__setitem(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt32_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt32_Add(void * jarg1, char * jarg2, int jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::map< std::string,int >::mapped_type *arg3 = 0 ;
  std::map< std::string,int >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_int_Sg__Add(arg1,(std::string const &)*arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt32_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringInt32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  result = (std::map< std::string,int,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_int_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringInt32_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int,std::less< std::string > >::iterator *arg2 = (std::map< std::string,int,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,int >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  arg2 = (std::map< std::string,int,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,int >::key_type *) &std_map_Sl_std_string_Sc_int_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int,std::less< std::string > >::iterator *arg2 = (std::map< std::string,int,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  arg2 = (std::map< std::string,int,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_int_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringInt32(void * jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  arg1 = (std::map< std::string,int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUInt32__SWIG_0() {
  void * jresult ;
  std::map< std::string,uint32_t > *result = 0 ;
  
  result = (std::map< std::string,uint32_t > *)new std::map< std::string,uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,uint32_t > *arg1 = 0 ;
  std::map< std::string,uint32_t > *result = 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,uint32_t > *)new std::map< std::string,uint32_t >((std::map< std::string,uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringUInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::size_type result;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  result = ((std::map< std::string,uint32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  result = (bool)((std::map< std::string,uint32_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt32_Clear(void * jarg1) {
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt32_getitem(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,unsigned int >::mapped_type *) &std_map_Sl_std_string_Sc_uint32_t_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt32_setitem(void * jarg1, char * jarg2, unsigned int jarg3) {
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_uint32_t_Sg__setitem(arg1,(std::string const &)*arg2,(unsigned int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt32_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_uint32_t_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt32_Add(void * jarg1, char * jarg2, unsigned int jarg3) {
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_uint32_t_Sg__Add(arg1,(std::string const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt32_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned int >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_uint32_t_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringUInt32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  result = (std::map< std::string,unsigned int,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_uint32_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringUInt32_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned int,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,unsigned int >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  arg2 = (std::map< std::string,unsigned int,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,unsigned int >::key_type *) &std_map_Sl_std_string_Sc_uint32_t_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  std::map< std::string,unsigned int,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned int,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  arg2 = (std::map< std::string,unsigned int,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_uint32_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringUInt32(void * jarg1) {
  std::map< std::string,uint32_t > *arg1 = (std::map< std::string,uint32_t > *) 0 ;
  
  arg1 = (std::map< std::string,uint32_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringInt64__SWIG_0() {
  void * jresult ;
  std::map< std::string,int64_t > *result = 0 ;
  
  result = (std::map< std::string,int64_t > *)new std::map< std::string,int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,int64_t > *arg1 = 0 ;
  std::map< std::string,int64_t > *result = 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,int64_t > *)new std::map< std::string,int64_t >((std::map< std::string,int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::size_type result;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  result = ((std::map< std::string,int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  result = (bool)((std::map< std::string,int64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt64_Clear(void * jarg1) {
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapStringInt64_getitem(void * jarg1, char * jarg2) {
  long long jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::key_type *arg2 = 0 ;
  std::map< std::string,long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,long long >::mapped_type *) &std_map_Sl_std_string_Sc_int64_t_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt64_setitem(void * jarg1, char * jarg2, long long jarg3) {
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::key_type *arg2 = 0 ;
  std::map< std::string,long long >::mapped_type *arg3 = 0 ;
  std::map< std::string,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int64_t_Sg__setitem(arg1,(std::string const &)*arg2,(long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt64_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_int64_t_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt64_Add(void * jarg1, char * jarg2, long long jarg3) {
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::key_type *arg2 = 0 ;
  std::map< std::string,long long >::mapped_type *arg3 = 0 ;
  std::map< std::string,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_int64_t_Sg__Add(arg1,(std::string const &)*arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringInt64_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_int64_t_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringInt64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  result = (std::map< std::string,long long,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_int64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringInt64_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long,std::less< std::string > >::iterator *arg2 = (std::map< std::string,long long,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,long long >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  arg2 = (std::map< std::string,long long,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,long long >::key_type *) &std_map_Sl_std_string_Sc_int64_t_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringInt64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  std::map< std::string,long long,std::less< std::string > >::iterator *arg2 = (std::map< std::string,long long,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  arg2 = (std::map< std::string,long long,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_int64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringInt64(void * jarg1) {
  std::map< std::string,int64_t > *arg1 = (std::map< std::string,int64_t > *) 0 ;
  
  arg1 = (std::map< std::string,int64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUInt64__SWIG_0() {
  void * jresult ;
  std::map< std::string,uint64_t > *result = 0 ;
  
  result = (std::map< std::string,uint64_t > *)new std::map< std::string,uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,uint64_t > *arg1 = 0 ;
  std::map< std::string,uint64_t > *result = 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,uint64_t > *)new std::map< std::string,uint64_t >((std::map< std::string,uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringUInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::size_type result;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  result = ((std::map< std::string,uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  result = (bool)((std::map< std::string,uint64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt64_Clear(void * jarg1) {
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_MapStringUInt64_getitem(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,unsigned long long >::mapped_type *) &std_map_Sl_std_string_Sc_uint64_t_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt64_setitem(void * jarg1, char * jarg2, unsigned long long jarg3) {
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_uint64_t_Sg__setitem(arg1,(std::string const &)*arg2,(unsigned long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt64_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_uint64_t_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt64_Add(void * jarg1, char * jarg2, unsigned long long jarg3) {
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_uint64_t_Sg__Add(arg1,(std::string const &)*arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUInt64_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned long long >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_uint64_t_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringUInt64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  result = (std::map< std::string,unsigned long long,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_uint64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringUInt64_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned long long,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,unsigned long long >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  arg2 = (std::map< std::string,unsigned long long,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,unsigned long long >::key_type *) &std_map_Sl_std_string_Sc_uint64_t_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUInt64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  std::map< std::string,unsigned long long,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned long long,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  arg2 = (std::map< std::string,unsigned long long,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_uint64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringUInt64(void * jarg1) {
  std::map< std::string,uint64_t > *arg1 = (std::map< std::string,uint64_t > *) 0 ;
  
  arg1 = (std::map< std::string,uint64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringDouble__SWIG_0() {
  void * jresult ;
  std::map< std::string,double > *result = 0 ;
  
  result = (std::map< std::string,double > *)new std::map< std::string,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringDouble__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,double > *arg1 = 0 ;
  std::map< std::string,double > *result = 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,double > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,double > *)new std::map< std::string,double >((std::map< std::string,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringDouble_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::size_type result;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  result = ((std::map< std::string,double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringDouble_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  result = (bool)((std::map< std::string,double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringDouble_Clear(void * jarg1) {
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_MapStringDouble_getitem(void * jarg1, char * jarg2) {
  double jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  std::map< std::string,double >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,double >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,double >::mapped_type *) &std_map_Sl_std_string_Sc_double_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringDouble_setitem(void * jarg1, char * jarg2, double jarg3) {
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  std::map< std::string,double >::mapped_type *arg3 = 0 ;
  std::map< std::string,double >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,double >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_double_Sg__setitem(arg1,(std::string const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringDouble_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,double >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_double_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringDouble_Add(void * jarg1, char * jarg2, double jarg3) {
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  std::map< std::string,double >::mapped_type *arg3 = 0 ;
  std::map< std::string,double >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,double >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_double_Sg__Add(arg1,(std::string const &)*arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringDouble_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,double >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_double_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringDouble_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  result = (std::map< std::string,double,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_double_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringDouble_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double,std::less< std::string > >::iterator *arg2 = (std::map< std::string,double,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,double >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  arg2 = (std::map< std::string,double,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,double >::key_type *) &std_map_Sl_std_string_Sc_double_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringDouble_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double,std::less< std::string > >::iterator *arg2 = (std::map< std::string,double,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  arg2 = (std::map< std::string,double,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_double_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringDouble(void * jarg1) {
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  
  arg1 = (std::map< std::string,double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringChar__SWIG_0() {
  void * jresult ;
  std::map< std::string,char > *result = 0 ;
  
  result = (std::map< std::string,char > *)new std::map< std::string,char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,char > *arg1 = 0 ;
  std::map< std::string,char > *result = 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,char > *)new std::map< std::string,char >((std::map< std::string,char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringChar_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::size_type result;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  result = ((std::map< std::string,char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringChar_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  result = (bool)((std::map< std::string,char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringChar_Clear(void * jarg1) {
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char SWIGSTDCALL CSharp_TileDB_MapStringChar_getitem(void * jarg1, char * jarg2) {
  char jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::key_type *arg2 = 0 ;
  std::map< std::string,char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,char >::mapped_type *) &std_map_Sl_std_string_Sc_char_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringChar_setitem(void * jarg1, char * jarg2, char jarg3) {
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::key_type *arg2 = 0 ;
  std::map< std::string,char >::mapped_type *arg3 = 0 ;
  std::map< std::string,char >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_char_Sg__setitem(arg1,(std::string const &)*arg2,(char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringChar_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_char_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringChar_Add(void * jarg1, char * jarg2, char jarg3) {
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::key_type *arg2 = 0 ;
  std::map< std::string,char >::mapped_type *arg3 = 0 ;
  std::map< std::string,char >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_char_Sg__Add(arg1,(std::string const &)*arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringChar_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_char_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringChar_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  result = (std::map< std::string,char,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringChar_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char,std::less< std::string > >::iterator *arg2 = (std::map< std::string,char,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,char >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  arg2 = (std::map< std::string,char,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,char >::key_type *) &std_map_Sl_std_string_Sc_char_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringChar_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  std::map< std::string,char,std::less< std::string > >::iterator *arg2 = (std::map< std::string,char,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  arg2 = (std::map< std::string,char,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringChar(void * jarg1) {
  std::map< std::string,char > *arg1 = (std::map< std::string,char > *) 0 ;
  
  arg1 = (std::map< std::string,char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUChar__SWIG_0() {
  void * jresult ;
  std::map< std::string,unsigned char > *result = 0 ;
  
  result = (std::map< std::string,unsigned char > *)new std::map< std::string,unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringUChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,unsigned char > *arg1 = 0 ;
  std::map< std::string,unsigned char > *result = 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,unsigned char > *)new std::map< std::string,unsigned char >((std::map< std::string,unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringUChar_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::size_type result;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  result = ((std::map< std::string,unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUChar_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  result = (bool)((std::map< std::string,unsigned char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUChar_Clear(void * jarg1) {
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TileDB_MapStringUChar_getitem(void * jarg1, char * jarg2) {
  unsigned char jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,unsigned char >::mapped_type *) &std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUChar_setitem(void * jarg1, char * jarg2, unsigned char jarg3) {
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__setitem(arg1,(std::string const &)*arg2,(unsigned char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUChar_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUChar_Add(void * jarg1, char * jarg2, unsigned char jarg3) {
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< std::string,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,unsigned char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__Add(arg1,(std::string const &)*arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringUChar_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,unsigned char >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringUChar_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  result = (std::map< std::string,unsigned char,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringUChar_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned char,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,unsigned char >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  arg2 = (std::map< std::string,unsigned char,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,unsigned char >::key_type *) &std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringUChar_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  std::map< std::string,unsigned char,std::less< std::string > >::iterator *arg2 = (std::map< std::string,unsigned char,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  arg2 = (std::map< std::string,unsigned char,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_unsigned_SS_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringUChar(void * jarg1) {
  std::map< std::string,unsigned char > *arg1 = (std::map< std::string,unsigned char > *) 0 ;
  
  arg1 = (std::map< std::string,unsigned char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32String__SWIG_0() {
  void * jresult ;
  std::map< int,std::string > *result = 0 ;
  
  result = (std::map< int,std::string > *)new std::map< int,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32String__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,std::string > *arg1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32String_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::size_type result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = ((std::map< int,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32String_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = (bool)((std::map< int,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32String_Clear(void * jarg1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapInt32String_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  std::map< int,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,std::string >::mapped_type *) &std_map_Sl_int_Sc_std_string_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32String_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_int_Sc_std_string_Sg__setitem(arg1,(int const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32String_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_std_string_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32String_Add(void * jarg1, int jarg2, char * jarg3) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_int_Sc_std_string_Sg__Add(arg1,(int const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32String_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_std_string_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32String_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = (std::map< int,std::string,std::less< int > >::iterator *)std_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32String_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *arg2 = (std::map< int,std::string,std::less< int > >::iterator *) 0 ;
  std::map< int,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  arg2 = (std::map< int,std::string,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,std::string >::key_type *) &std_map_Sl_int_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32String_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *arg2 = (std::map< int,std::string,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  arg2 = (std::map< int,std::string,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32String(void * jarg1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Int32__SWIG_0() {
  void * jresult ;
  std::map< int,int > *result = 0 ;
  
  result = (std::map< int,int > *)new std::map< int,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Int32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,int > *arg1 = 0 ;
  std::map< int,int > *result = 0 ;
  
  arg1 = (std::map< int,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,int > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,int > *)new std::map< int,int >((std::map< int,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32Int32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::size_type result;
  
  arg1 = (std::map< int,int > *)jarg1; 
  result = ((std::map< int,int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,int > *)jarg1; 
  result = (bool)((std::map< int,int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int32_Clear(void * jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32Int32_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::key_type temp2 ;
  std::map< int,int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  temp2 = (std::map< int,int >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,int >::mapped_type *) &std_map_Sl_int_Sc_int_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int32_setitem(void * jarg1, int jarg2, int jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::mapped_type *arg3 = 0 ;
  std::map< int,int >::key_type temp2 ;
  std::map< int,int >::mapped_type temp3 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  temp2 = (std::map< int,int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_int_Sg__setitem(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int32_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,int > *)jarg1; 
  temp2 = (std::map< int,int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int32_Add(void * jarg1, int jarg2, int jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::mapped_type *arg3 = 0 ;
  std::map< int,int >::key_type temp2 ;
  std::map< int,int >::mapped_type temp3 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  temp2 = (std::map< int,int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_int_Sg__Add(arg1,(int const &)*arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int32_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int >::key_type *arg2 = 0 ;
  std::map< int,int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,int > *)jarg1; 
  temp2 = (std::map< int,int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32Int32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  result = (std::map< int,int,std::less< int > >::iterator *)std_map_Sl_int_Sc_int_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32Int32_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int,std::less< int > >::iterator *arg2 = (std::map< int,int,std::less< int > >::iterator *) 0 ;
  std::map< int,int >::key_type *result = 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  arg2 = (std::map< int,int,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,int >::key_type *) &std_map_Sl_int_Sc_int_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  std::map< int,int,std::less< int > >::iterator *arg2 = (std::map< int,int,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  arg2 = (std::map< int,int,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_int_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32Int32(void * jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  arg1 = (std::map< int,int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UInt32__SWIG_0() {
  void * jresult ;
  std::map< int,uint32_t > *result = 0 ;
  
  result = (std::map< int,uint32_t > *)new std::map< int,uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,uint32_t > *arg1 = 0 ;
  std::map< int,uint32_t > *result = 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,uint32_t > *)new std::map< int,uint32_t >((std::map< int,uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::size_type result;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  result = ((std::map< int,uint32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  result = (bool)((std::map< int,uint32_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_Clear(void * jarg1) {
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::key_type *arg2 = 0 ;
  std::map< int,unsigned int >::key_type temp2 ;
  std::map< int,unsigned int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  temp2 = (std::map< int,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,unsigned int >::mapped_type *) &std_map_Sl_int_Sc_uint32_t_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::key_type *arg2 = 0 ;
  std::map< int,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned int >::key_type temp2 ;
  std::map< int,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  temp2 = (std::map< int,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_uint32_t_Sg__setitem(arg1,(int const &)*arg2,(unsigned int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::key_type *arg2 = 0 ;
  std::map< int,unsigned int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  temp2 = (std::map< int,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_uint32_t_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_Add(void * jarg1, int jarg2, unsigned int jarg3) {
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::key_type *arg2 = 0 ;
  std::map< int,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned int >::key_type temp2 ;
  std::map< int,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  temp2 = (std::map< int,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_uint32_t_Sg__Add(arg1,(int const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int >::key_type *arg2 = 0 ;
  std::map< int,unsigned int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  temp2 = (std::map< int,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_uint32_t_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  result = (std::map< int,unsigned int,std::less< int > >::iterator *)std_map_Sl_int_Sc_uint32_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int,std::less< int > >::iterator *arg2 = (std::map< int,unsigned int,std::less< int > >::iterator *) 0 ;
  std::map< int,unsigned int >::key_type *result = 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  arg2 = (std::map< int,unsigned int,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,unsigned int >::key_type *) &std_map_Sl_int_Sc_uint32_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  std::map< int,unsigned int,std::less< int > >::iterator *arg2 = (std::map< int,unsigned int,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  arg2 = (std::map< int,unsigned int,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_uint32_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32UInt32(void * jarg1) {
  std::map< int,uint32_t > *arg1 = (std::map< int,uint32_t > *) 0 ;
  
  arg1 = (std::map< int,uint32_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Int64__SWIG_0() {
  void * jresult ;
  std::map< int,int64_t > *result = 0 ;
  
  result = (std::map< int,int64_t > *)new std::map< int,int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Int64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,int64_t > *arg1 = 0 ;
  std::map< int,int64_t > *result = 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,int64_t > *)new std::map< int,int64_t >((std::map< int,int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32Int64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::size_type result;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  result = ((std::map< int,int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  result = (bool)((std::map< int,int64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int64_Clear(void * jarg1) {
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt32Int64_getitem(void * jarg1, int jarg2) {
  long long jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::key_type *arg2 = 0 ;
  std::map< int,long long >::key_type temp2 ;
  std::map< int,long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  temp2 = (std::map< int,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,long long >::mapped_type *) &std_map_Sl_int_Sc_int64_t_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int64_setitem(void * jarg1, int jarg2, long long jarg3) {
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::key_type *arg2 = 0 ;
  std::map< int,long long >::mapped_type *arg3 = 0 ;
  std::map< int,long long >::key_type temp2 ;
  std::map< int,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  temp2 = (std::map< int,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_int64_t_Sg__setitem(arg1,(int const &)*arg2,(long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int64_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::key_type *arg2 = 0 ;
  std::map< int,long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  temp2 = (std::map< int,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int64_t_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int64_Add(void * jarg1, int jarg2, long long jarg3) {
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::key_type *arg2 = 0 ;
  std::map< int,long long >::mapped_type *arg3 = 0 ;
  std::map< int,long long >::key_type temp2 ;
  std::map< int,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  temp2 = (std::map< int,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_int64_t_Sg__Add(arg1,(int const &)*arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Int64_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long >::key_type *arg2 = 0 ;
  std::map< int,long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  temp2 = (std::map< int,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int64_t_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32Int64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  result = (std::map< int,long long,std::less< int > >::iterator *)std_map_Sl_int_Sc_int64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32Int64_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long,std::less< int > >::iterator *arg2 = (std::map< int,long long,std::less< int > >::iterator *) 0 ;
  std::map< int,long long >::key_type *result = 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  arg2 = (std::map< int,long long,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,long long >::key_type *) &std_map_Sl_int_Sc_int64_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Int64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  std::map< int,long long,std::less< int > >::iterator *arg2 = (std::map< int,long long,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  arg2 = (std::map< int,long long,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_int64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32Int64(void * jarg1) {
  std::map< int,int64_t > *arg1 = (std::map< int,int64_t > *) 0 ;
  
  arg1 = (std::map< int,int64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UInt64__SWIG_0() {
  void * jresult ;
  std::map< int,uint64_t > *result = 0 ;
  
  result = (std::map< int,uint64_t > *)new std::map< int,uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,uint64_t > *arg1 = 0 ;
  std::map< int,uint64_t > *result = 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,uint64_t > *)new std::map< int,uint64_t >((std::map< int,uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::size_type result;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  result = ((std::map< int,uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  result = (bool)((std::map< int,uint64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_Clear(void * jarg1) {
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_getitem(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::key_type *arg2 = 0 ;
  std::map< int,unsigned long long >::key_type temp2 ;
  std::map< int,unsigned long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  temp2 = (std::map< int,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,unsigned long long >::mapped_type *) &std_map_Sl_int_Sc_uint64_t_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_setitem(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::key_type *arg2 = 0 ;
  std::map< int,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned long long >::key_type temp2 ;
  std::map< int,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  temp2 = (std::map< int,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_uint64_t_Sg__setitem(arg1,(int const &)*arg2,(unsigned long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::key_type *arg2 = 0 ;
  std::map< int,unsigned long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  temp2 = (std::map< int,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_uint64_t_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_Add(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::key_type *arg2 = 0 ;
  std::map< int,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned long long >::key_type temp2 ;
  std::map< int,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  temp2 = (std::map< int,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_uint64_t_Sg__Add(arg1,(int const &)*arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long >::key_type *arg2 = 0 ;
  std::map< int,unsigned long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  temp2 = (std::map< int,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_uint64_t_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  result = (std::map< int,unsigned long long,std::less< int > >::iterator *)std_map_Sl_int_Sc_uint64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long,std::less< int > >::iterator *arg2 = (std::map< int,unsigned long long,std::less< int > >::iterator *) 0 ;
  std::map< int,unsigned long long >::key_type *result = 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  arg2 = (std::map< int,unsigned long long,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,unsigned long long >::key_type *) &std_map_Sl_int_Sc_uint64_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UInt64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  std::map< int,unsigned long long,std::less< int > >::iterator *arg2 = (std::map< int,unsigned long long,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  arg2 = (std::map< int,unsigned long long,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_uint64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32UInt64(void * jarg1) {
  std::map< int,uint64_t > *arg1 = (std::map< int,uint64_t > *) 0 ;
  
  arg1 = (std::map< int,uint64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Double__SWIG_0() {
  void * jresult ;
  std::map< int,double > *result = 0 ;
  
  result = (std::map< int,double > *)new std::map< int,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Double__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,double > *arg1 = 0 ;
  std::map< int,double > *result = 0 ;
  
  arg1 = (std::map< int,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,double > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,double > *)new std::map< int,double >((std::map< int,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32Double_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::size_type result;
  
  arg1 = (std::map< int,double > *)jarg1; 
  result = ((std::map< int,double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Double_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,double > *)jarg1; 
  result = (bool)((std::map< int,double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Double_Clear(void * jarg1) {
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_MapInt32Double_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::key_type *arg2 = 0 ;
  std::map< int,double >::key_type temp2 ;
  std::map< int,double >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  temp2 = (std::map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,double >::mapped_type *) &std_map_Sl_int_Sc_double_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Double_setitem(void * jarg1, int jarg2, double jarg3) {
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::key_type *arg2 = 0 ;
  std::map< int,double >::mapped_type *arg3 = 0 ;
  std::map< int,double >::key_type temp2 ;
  std::map< int,double >::mapped_type temp3 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  temp2 = (std::map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_double_Sg__setitem(arg1,(int const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Double_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::key_type *arg2 = 0 ;
  std::map< int,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,double > *)jarg1; 
  temp2 = (std::map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_double_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Double_Add(void * jarg1, int jarg2, double jarg3) {
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::key_type *arg2 = 0 ;
  std::map< int,double >::mapped_type *arg3 = 0 ;
  std::map< int,double >::key_type temp2 ;
  std::map< int,double >::mapped_type temp3 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  temp2 = (std::map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_double_Sg__Add(arg1,(int const &)*arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Double_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double >::key_type *arg2 = 0 ;
  std::map< int,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,double > *)jarg1; 
  temp2 = (std::map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_double_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32Double_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  result = (std::map< int,double,std::less< int > >::iterator *)std_map_Sl_int_Sc_double_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32Double_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double,std::less< int > >::iterator *arg2 = (std::map< int,double,std::less< int > >::iterator *) 0 ;
  std::map< int,double >::key_type *result = 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  arg2 = (std::map< int,double,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,double >::key_type *) &std_map_Sl_int_Sc_double_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Double_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  std::map< int,double,std::less< int > >::iterator *arg2 = (std::map< int,double,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  arg2 = (std::map< int,double,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_double_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32Double(void * jarg1) {
  std::map< int,double > *arg1 = (std::map< int,double > *) 0 ;
  
  arg1 = (std::map< int,double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Char__SWIG_0() {
  void * jresult ;
  std::map< int,char > *result = 0 ;
  
  result = (std::map< int,char > *)new std::map< int,char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32Char__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,char > *arg1 = 0 ;
  std::map< int,char > *result = 0 ;
  
  arg1 = (std::map< int,char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,char > *)new std::map< int,char >((std::map< int,char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32Char_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::size_type result;
  
  arg1 = (std::map< int,char > *)jarg1; 
  result = ((std::map< int,char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Char_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,char > *)jarg1; 
  result = (bool)((std::map< int,char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Char_Clear(void * jarg1) {
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char SWIGSTDCALL CSharp_TileDB_MapInt32Char_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::key_type *arg2 = 0 ;
  std::map< int,char >::key_type temp2 ;
  std::map< int,char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  temp2 = (std::map< int,char >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,char >::mapped_type *) &std_map_Sl_int_Sc_char_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Char_setitem(void * jarg1, int jarg2, char jarg3) {
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::key_type *arg2 = 0 ;
  std::map< int,char >::mapped_type *arg3 = 0 ;
  std::map< int,char >::key_type temp2 ;
  std::map< int,char >::mapped_type temp3 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  temp2 = (std::map< int,char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_char_Sg__setitem(arg1,(int const &)*arg2,(char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Char_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::key_type *arg2 = 0 ;
  std::map< int,char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,char > *)jarg1; 
  temp2 = (std::map< int,char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_char_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Char_Add(void * jarg1, int jarg2, char jarg3) {
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::key_type *arg2 = 0 ;
  std::map< int,char >::mapped_type *arg3 = 0 ;
  std::map< int,char >::key_type temp2 ;
  std::map< int,char >::mapped_type temp3 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  temp2 = (std::map< int,char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_char_Sg__Add(arg1,(int const &)*arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32Char_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char >::key_type *arg2 = 0 ;
  std::map< int,char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,char > *)jarg1; 
  temp2 = (std::map< int,char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_char_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32Char_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  result = (std::map< int,char,std::less< int > >::iterator *)std_map_Sl_int_Sc_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32Char_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char,std::less< int > >::iterator *arg2 = (std::map< int,char,std::less< int > >::iterator *) 0 ;
  std::map< int,char >::key_type *result = 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  arg2 = (std::map< int,char,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,char >::key_type *) &std_map_Sl_int_Sc_char_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32Char_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  std::map< int,char,std::less< int > >::iterator *arg2 = (std::map< int,char,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  arg2 = (std::map< int,char,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32Char(void * jarg1) {
  std::map< int,char > *arg1 = (std::map< int,char > *) 0 ;
  
  arg1 = (std::map< int,char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UChar__SWIG_0() {
  void * jresult ;
  std::map< int,unsigned char > *result = 0 ;
  
  result = (std::map< int,unsigned char > *)new std::map< int,unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt32UChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,unsigned char > *arg1 = 0 ;
  std::map< int,unsigned char > *result = 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,unsigned char > *)new std::map< int,unsigned char >((std::map< int,unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt32UChar_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::size_type result;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  result = ((std::map< int,unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UChar_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  result = (bool)((std::map< int,unsigned char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UChar_Clear(void * jarg1) {
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TileDB_MapInt32UChar_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::key_type *arg2 = 0 ;
  std::map< int,unsigned char >::key_type temp2 ;
  std::map< int,unsigned char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  temp2 = (std::map< int,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,unsigned char >::mapped_type *) &std_map_Sl_int_Sc_unsigned_SS_char_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UChar_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::key_type *arg2 = 0 ;
  std::map< int,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned char >::key_type temp2 ;
  std::map< int,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  temp2 = (std::map< int,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_unsigned_SS_char_Sg__setitem(arg1,(int const &)*arg2,(unsigned char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UChar_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::key_type *arg2 = 0 ;
  std::map< int,unsigned char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  temp2 = (std::map< int,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_unsigned_SS_char_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UChar_Add(void * jarg1, int jarg2, unsigned char jarg3) {
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::key_type *arg2 = 0 ;
  std::map< int,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< int,unsigned char >::key_type temp2 ;
  std::map< int,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  temp2 = (std::map< int,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< int,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int_Sc_unsigned_SS_char_Sg__Add(arg1,(int const &)*arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt32UChar_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char >::key_type *arg2 = 0 ;
  std::map< int,unsigned char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  temp2 = (std::map< int,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_unsigned_SS_char_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt32UChar_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  result = (std::map< int,unsigned char,std::less< int > >::iterator *)std_map_Sl_int_Sc_unsigned_SS_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt32UChar_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char,std::less< int > >::iterator *arg2 = (std::map< int,unsigned char,std::less< int > >::iterator *) 0 ;
  std::map< int,unsigned char >::key_type *result = 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  arg2 = (std::map< int,unsigned char,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,unsigned char >::key_type *) &std_map_Sl_int_Sc_unsigned_SS_char_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt32UChar_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  std::map< int,unsigned char,std::less< int > >::iterator *arg2 = (std::map< int,unsigned char,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  arg2 = (std::map< int,unsigned char,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_unsigned_SS_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt32UChar(void * jarg1) {
  std::map< int,unsigned char > *arg1 = (std::map< int,unsigned char > *) 0 ;
  
  arg1 = (std::map< int,unsigned char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64String__SWIG_0() {
  void * jresult ;
  std::map< int64_t,std::string > *result = 0 ;
  
  result = (std::map< int64_t,std::string > *)new std::map< int64_t,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64String__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,std::string > *arg1 = 0 ;
  std::map< int64_t,std::string > *result = 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,std::string > *)new std::map< int64_t,std::string >((std::map< int64_t,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64String_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::size_type result;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  result = ((std::map< int64_t,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64String_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  result = (bool)((std::map< int64_t,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64String_Clear(void * jarg1) {
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapInt64String_getitem(void * jarg1, long long jarg2) {
  char * jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::key_type *arg2 = 0 ;
  std::map< long long,std::string >::key_type temp2 ;
  std::map< long long,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  temp2 = (std::map< long long,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,std::string >::mapped_type *) &std_map_Sl_int64_t_Sc_std_string_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64String_setitem(void * jarg1, long long jarg2, char * jarg3) {
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::key_type *arg2 = 0 ;
  std::map< long long,std::string >::mapped_type *arg3 = 0 ;
  std::map< long long,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  temp2 = (std::map< long long,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< long long,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_int64_t_Sc_std_string_Sg__setitem(arg1,(long long const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64String_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::key_type *arg2 = 0 ;
  std::map< long long,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  temp2 = (std::map< long long,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_std_string_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64String_Add(void * jarg1, long long jarg2, char * jarg3) {
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::key_type *arg2 = 0 ;
  std::map< long long,std::string >::mapped_type *arg3 = 0 ;
  std::map< long long,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  temp2 = (std::map< long long,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< long long,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_int64_t_Sc_std_string_Sg__Add(arg1,(long long const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64String_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string >::key_type *arg2 = 0 ;
  std::map< long long,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  temp2 = (std::map< long long,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_std_string_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64String_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  result = (std::map< long long,std::string,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64String_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string,std::less< long long > >::iterator *arg2 = (std::map< long long,std::string,std::less< long long > >::iterator *) 0 ;
  std::map< long long,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  arg2 = (std::map< long long,std::string,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,std::string >::key_type *) &std_map_Sl_int64_t_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64String_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  std::map< long long,std::string,std::less< long long > >::iterator *arg2 = (std::map< long long,std::string,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  arg2 = (std::map< long long,std::string,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64String(void * jarg1) {
  std::map< int64_t,std::string > *arg1 = (std::map< int64_t,std::string > *) 0 ;
  
  arg1 = (std::map< int64_t,std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Int32__SWIG_0() {
  void * jresult ;
  std::map< int64_t,int > *result = 0 ;
  
  result = (std::map< int64_t,int > *)new std::map< int64_t,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Int32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,int > *arg1 = 0 ;
  std::map< int64_t,int > *result = 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,int > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,int > *)new std::map< int64_t,int >((std::map< int64_t,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64Int32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::size_type result;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  result = ((std::map< int64_t,int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  result = (bool)((std::map< int64_t,int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int32_Clear(void * jarg1) {
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_MapInt64Int32_getitem(void * jarg1, long long jarg2) {
  int jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::key_type *arg2 = 0 ;
  std::map< long long,int >::key_type temp2 ;
  std::map< long long,int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  temp2 = (std::map< long long,int >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,int >::mapped_type *) &std_map_Sl_int64_t_Sc_int_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int32_setitem(void * jarg1, long long jarg2, int jarg3) {
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::key_type *arg2 = 0 ;
  std::map< long long,int >::mapped_type *arg3 = 0 ;
  std::map< long long,int >::key_type temp2 ;
  std::map< long long,int >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  temp2 = (std::map< long long,int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_int_Sg__setitem(arg1,(long long const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int32_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::key_type *arg2 = 0 ;
  std::map< long long,int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  temp2 = (std::map< long long,int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_int_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int32_Add(void * jarg1, long long jarg2, int jarg3) {
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::key_type *arg2 = 0 ;
  std::map< long long,int >::mapped_type *arg3 = 0 ;
  std::map< long long,int >::key_type temp2 ;
  std::map< long long,int >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  temp2 = (std::map< long long,int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_int_Sg__Add(arg1,(long long const &)*arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int32_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int >::key_type *arg2 = 0 ;
  std::map< long long,int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  temp2 = (std::map< long long,int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_int_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64Int32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  result = (std::map< long long,int,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_int_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64Int32_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int,std::less< long long > >::iterator *arg2 = (std::map< long long,int,std::less< long long > >::iterator *) 0 ;
  std::map< long long,int >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  arg2 = (std::map< long long,int,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,int >::key_type *) &std_map_Sl_int64_t_Sc_int_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  std::map< long long,int,std::less< long long > >::iterator *arg2 = (std::map< long long,int,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  arg2 = (std::map< long long,int,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_int_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64Int32(void * jarg1) {
  std::map< int64_t,int > *arg1 = (std::map< int64_t,int > *) 0 ;
  
  arg1 = (std::map< int64_t,int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UInt32__SWIG_0() {
  void * jresult ;
  std::map< int64_t,uint32_t > *result = 0 ;
  
  result = (std::map< int64_t,uint32_t > *)new std::map< int64_t,uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UInt32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,uint32_t > *arg1 = 0 ;
  std::map< int64_t,uint32_t > *result = 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,uint32_t > *)new std::map< int64_t,uint32_t >((std::map< int64_t,uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::size_type result;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  result = ((std::map< int64_t,uint32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  result = (bool)((std::map< int64_t,uint32_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_Clear(void * jarg1) {
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_getitem(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::key_type *arg2 = 0 ;
  std::map< long long,unsigned int >::key_type temp2 ;
  std::map< long long,unsigned int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,unsigned int >::mapped_type *) &std_map_Sl_int64_t_Sc_uint32_t_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_setitem(void * jarg1, long long jarg2, unsigned int jarg3) {
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::key_type *arg2 = 0 ;
  std::map< long long,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned int >::key_type temp2 ;
  std::map< long long,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_uint32_t_Sg__setitem(arg1,(long long const &)*arg2,(unsigned int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::key_type *arg2 = 0 ;
  std::map< long long,unsigned int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_uint32_t_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_Add(void * jarg1, long long jarg2, unsigned int jarg3) {
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::key_type *arg2 = 0 ;
  std::map< long long,unsigned int >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned int >::key_type temp2 ;
  std::map< long long,unsigned int >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_uint32_t_Sg__Add(arg1,(long long const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int >::key_type *arg2 = 0 ;
  std::map< long long,unsigned int >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned int >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_uint32_t_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  result = (std::map< long long,unsigned int,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_uint32_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned int,std::less< long long > >::iterator *) 0 ;
  std::map< long long,unsigned int >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  arg2 = (std::map< long long,unsigned int,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,unsigned int >::key_type *) &std_map_Sl_int64_t_Sc_uint32_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt32_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  std::map< long long,unsigned int,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned int,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  arg2 = (std::map< long long,unsigned int,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_uint32_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64UInt32(void * jarg1) {
  std::map< int64_t,uint32_t > *arg1 = (std::map< int64_t,uint32_t > *) 0 ;
  
  arg1 = (std::map< int64_t,uint32_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Int64__SWIG_0() {
  void * jresult ;
  std::map< int64_t,int64_t > *result = 0 ;
  
  result = (std::map< int64_t,int64_t > *)new std::map< int64_t,int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Int64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,int64_t > *arg1 = 0 ;
  std::map< int64_t,int64_t > *result = 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,int64_t > *)new std::map< int64_t,int64_t >((std::map< int64_t,int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64Int64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::size_type result;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  result = ((std::map< int64_t,int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  result = (bool)((std::map< int64_t,int64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int64_Clear(void * jarg1) {
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64Int64_getitem(void * jarg1, long long jarg2) {
  long long jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::key_type *arg2 = 0 ;
  std::map< long long,long long >::key_type temp2 ;
  std::map< long long,long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  temp2 = (std::map< long long,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,long long >::mapped_type *) &std_map_Sl_int64_t_Sc_int64_t_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int64_setitem(void * jarg1, long long jarg2, long long jarg3) {
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::key_type *arg2 = 0 ;
  std::map< long long,long long >::mapped_type *arg3 = 0 ;
  std::map< long long,long long >::key_type temp2 ;
  std::map< long long,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  temp2 = (std::map< long long,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_int64_t_Sg__setitem(arg1,(long long const &)*arg2,(long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int64_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::key_type *arg2 = 0 ;
  std::map< long long,long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  temp2 = (std::map< long long,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_int64_t_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int64_Add(void * jarg1, long long jarg2, long long jarg3) {
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::key_type *arg2 = 0 ;
  std::map< long long,long long >::mapped_type *arg3 = 0 ;
  std::map< long long,long long >::key_type temp2 ;
  std::map< long long,long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  temp2 = (std::map< long long,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_int64_t_Sg__Add(arg1,(long long const &)*arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Int64_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long >::key_type *arg2 = 0 ;
  std::map< long long,long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  temp2 = (std::map< long long,long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_int64_t_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64Int64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  result = (std::map< long long,long long,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_int64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64Int64_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long,std::less< long long > >::iterator *arg2 = (std::map< long long,long long,std::less< long long > >::iterator *) 0 ;
  std::map< long long,long long >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  arg2 = (std::map< long long,long long,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,long long >::key_type *) &std_map_Sl_int64_t_Sc_int64_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Int64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  std::map< long long,long long,std::less< long long > >::iterator *arg2 = (std::map< long long,long long,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  arg2 = (std::map< long long,long long,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_int64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64Int64(void * jarg1) {
  std::map< int64_t,int64_t > *arg1 = (std::map< int64_t,int64_t > *) 0 ;
  
  arg1 = (std::map< int64_t,int64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UInt64__SWIG_0() {
  void * jresult ;
  std::map< int64_t,uint64_t > *result = 0 ;
  
  result = (std::map< int64_t,uint64_t > *)new std::map< int64_t,uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,uint64_t > *arg1 = 0 ;
  std::map< int64_t,uint64_t > *result = 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,uint64_t > *)new std::map< int64_t,uint64_t >((std::map< int64_t,uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::size_type result;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  result = ((std::map< int64_t,uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  result = (bool)((std::map< int64_t,uint64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_Clear(void * jarg1) {
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_getitem(void * jarg1, long long jarg2) {
  unsigned long long jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::key_type *arg2 = 0 ;
  std::map< long long,unsigned long long >::key_type temp2 ;
  std::map< long long,unsigned long long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,unsigned long long >::mapped_type *) &std_map_Sl_int64_t_Sc_uint64_t_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_setitem(void * jarg1, long long jarg2, unsigned long long jarg3) {
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::key_type *arg2 = 0 ;
  std::map< long long,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned long long >::key_type temp2 ;
  std::map< long long,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_uint64_t_Sg__setitem(arg1,(long long const &)*arg2,(unsigned long long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::key_type *arg2 = 0 ;
  std::map< long long,unsigned long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_uint64_t_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_Add(void * jarg1, long long jarg2, unsigned long long jarg3) {
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::key_type *arg2 = 0 ;
  std::map< long long,unsigned long long >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned long long >::key_type temp2 ;
  std::map< long long,unsigned long long >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned long long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_uint64_t_Sg__Add(arg1,(long long const &)*arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long >::key_type *arg2 = 0 ;
  std::map< long long,unsigned long long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< long long,unsigned long long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_uint64_t_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  result = (std::map< long long,unsigned long long,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_uint64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned long long,std::less< long long > >::iterator *) 0 ;
  std::map< long long,unsigned long long >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  arg2 = (std::map< long long,unsigned long long,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,unsigned long long >::key_type *) &std_map_Sl_int64_t_Sc_uint64_t_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UInt64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  std::map< long long,unsigned long long,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned long long,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  arg2 = (std::map< long long,unsigned long long,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_uint64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64UInt64(void * jarg1) {
  std::map< int64_t,uint64_t > *arg1 = (std::map< int64_t,uint64_t > *) 0 ;
  
  arg1 = (std::map< int64_t,uint64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Double__SWIG_0() {
  void * jresult ;
  std::map< int64_t,double > *result = 0 ;
  
  result = (std::map< int64_t,double > *)new std::map< int64_t,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Double__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,double > *arg1 = 0 ;
  std::map< int64_t,double > *result = 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,double > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,double > *)new std::map< int64_t,double >((std::map< int64_t,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64Double_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::size_type result;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  result = ((std::map< int64_t,double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Double_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  result = (bool)((std::map< int64_t,double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Double_Clear(void * jarg1) {
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_MapInt64Double_getitem(void * jarg1, long long jarg2) {
  double jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::key_type *arg2 = 0 ;
  std::map< long long,double >::key_type temp2 ;
  std::map< long long,double >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  temp2 = (std::map< long long,double >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,double >::mapped_type *) &std_map_Sl_int64_t_Sc_double_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Double_setitem(void * jarg1, long long jarg2, double jarg3) {
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::key_type *arg2 = 0 ;
  std::map< long long,double >::mapped_type *arg3 = 0 ;
  std::map< long long,double >::key_type temp2 ;
  std::map< long long,double >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  temp2 = (std::map< long long,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_double_Sg__setitem(arg1,(long long const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Double_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::key_type *arg2 = 0 ;
  std::map< long long,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  temp2 = (std::map< long long,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_double_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Double_Add(void * jarg1, long long jarg2, double jarg3) {
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::key_type *arg2 = 0 ;
  std::map< long long,double >::mapped_type *arg3 = 0 ;
  std::map< long long,double >::key_type temp2 ;
  std::map< long long,double >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  temp2 = (std::map< long long,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_double_Sg__Add(arg1,(long long const &)*arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Double_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double >::key_type *arg2 = 0 ;
  std::map< long long,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  temp2 = (std::map< long long,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_double_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64Double_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  result = (std::map< long long,double,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_double_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64Double_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double,std::less< long long > >::iterator *arg2 = (std::map< long long,double,std::less< long long > >::iterator *) 0 ;
  std::map< long long,double >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  arg2 = (std::map< long long,double,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,double >::key_type *) &std_map_Sl_int64_t_Sc_double_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Double_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  std::map< long long,double,std::less< long long > >::iterator *arg2 = (std::map< long long,double,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  arg2 = (std::map< long long,double,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_double_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64Double(void * jarg1) {
  std::map< int64_t,double > *arg1 = (std::map< int64_t,double > *) 0 ;
  
  arg1 = (std::map< int64_t,double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Char__SWIG_0() {
  void * jresult ;
  std::map< int64_t,char > *result = 0 ;
  
  result = (std::map< int64_t,char > *)new std::map< int64_t,char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64Char__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,char > *arg1 = 0 ;
  std::map< int64_t,char > *result = 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,char > *)new std::map< int64_t,char >((std::map< int64_t,char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64Char_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::size_type result;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  result = ((std::map< int64_t,char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Char_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  result = (bool)((std::map< int64_t,char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Char_Clear(void * jarg1) {
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT char SWIGSTDCALL CSharp_TileDB_MapInt64Char_getitem(void * jarg1, long long jarg2) {
  char jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::key_type *arg2 = 0 ;
  std::map< long long,char >::key_type temp2 ;
  std::map< long long,char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  temp2 = (std::map< long long,char >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,char >::mapped_type *) &std_map_Sl_int64_t_Sc_char_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Char_setitem(void * jarg1, long long jarg2, char jarg3) {
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::key_type *arg2 = 0 ;
  std::map< long long,char >::mapped_type *arg3 = 0 ;
  std::map< long long,char >::key_type temp2 ;
  std::map< long long,char >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  temp2 = (std::map< long long,char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_char_Sg__setitem(arg1,(long long const &)*arg2,(char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Char_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::key_type *arg2 = 0 ;
  std::map< long long,char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  temp2 = (std::map< long long,char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_char_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Char_Add(void * jarg1, long long jarg2, char jarg3) {
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::key_type *arg2 = 0 ;
  std::map< long long,char >::mapped_type *arg3 = 0 ;
  std::map< long long,char >::key_type temp2 ;
  std::map< long long,char >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  temp2 = (std::map< long long,char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_char_Sg__Add(arg1,(long long const &)*arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64Char_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char >::key_type *arg2 = 0 ;
  std::map< long long,char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  temp2 = (std::map< long long,char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_char_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64Char_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  result = (std::map< long long,char,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64Char_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char,std::less< long long > >::iterator *arg2 = (std::map< long long,char,std::less< long long > >::iterator *) 0 ;
  std::map< long long,char >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  arg2 = (std::map< long long,char,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,char >::key_type *) &std_map_Sl_int64_t_Sc_char_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64Char_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  std::map< long long,char,std::less< long long > >::iterator *arg2 = (std::map< long long,char,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  arg2 = (std::map< long long,char,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64Char(void * jarg1) {
  std::map< int64_t,char > *arg1 = (std::map< int64_t,char > *) 0 ;
  
  arg1 = (std::map< int64_t,char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UChar__SWIG_0() {
  void * jresult ;
  std::map< int64_t,unsigned char > *result = 0 ;
  
  result = (std::map< int64_t,unsigned char > *)new std::map< int64_t,unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapInt64UChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int64_t,unsigned char > *arg1 = 0 ;
  std::map< int64_t,unsigned char > *result = 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int64_t,unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int64_t,unsigned char > *)new std::map< int64_t,unsigned char >((std::map< int64_t,unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapInt64UChar_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::size_type result;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  result = ((std::map< int64_t,unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UChar_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  bool result;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  result = (bool)((std::map< int64_t,unsigned char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UChar_Clear(void * jarg1) {
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TileDB_MapInt64UChar_getitem(void * jarg1, long long jarg2) {
  unsigned char jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::key_type *arg2 = 0 ;
  std::map< long long,unsigned char >::key_type temp2 ;
  std::map< long long,unsigned char >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  temp2 = (std::map< long long,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< long long,unsigned char >::mapped_type *) &std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__getitem(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UChar_setitem(void * jarg1, long long jarg2, unsigned char jarg3) {
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::key_type *arg2 = 0 ;
  std::map< long long,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned char >::key_type temp2 ;
  std::map< long long,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  temp2 = (std::map< long long,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__setitem(arg1,(long long const &)*arg2,(unsigned char const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UChar_ContainsKey(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::key_type *arg2 = 0 ;
  std::map< long long,unsigned char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  temp2 = (std::map< long long,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__ContainsKey(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UChar_Add(void * jarg1, long long jarg2, unsigned char jarg3) {
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::key_type *arg2 = 0 ;
  std::map< long long,unsigned char >::mapped_type *arg3 = 0 ;
  std::map< long long,unsigned char >::key_type temp2 ;
  std::map< long long,unsigned char >::mapped_type temp3 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  temp2 = (std::map< long long,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< long long,unsigned char >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__Add(arg1,(long long const &)*arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapInt64UChar_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char >::key_type *arg2 = 0 ;
  std::map< long long,unsigned char >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  temp2 = (std::map< long long,unsigned char >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapInt64UChar_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char,std::less< long long > >::iterator *result = 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  result = (std::map< long long,unsigned char,std::less< long long > >::iterator *)std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_MapInt64UChar_get_next_key(void * jarg1, void * jarg2) {
  long long jresult ;
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned char,std::less< long long > >::iterator *) 0 ;
  std::map< long long,unsigned char >::key_type *result = 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  arg2 = (std::map< long long,unsigned char,std::less< long long > >::iterator *)jarg2; 
  result = (std::map< long long,unsigned char >::key_type *) &std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapInt64UChar_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  std::map< long long,unsigned char,std::less< long long > >::iterator *arg2 = (std::map< long long,unsigned char,std::less< long long > >::iterator *) 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  arg2 = (std::map< long long,unsigned char,std::less< long long > >::iterator *)jarg2; 
  std_map_Sl_int64_t_Sc_unsigned_SS_char_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapInt64UChar(void * jarg1) {
  std::map< int64_t,unsigned char > *arg1 = (std::map< int64_t,unsigned char > *) 0 ;
  
  arg1 = (std::map< int64_t,unsigned char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairStringString__SWIG_0() {
  void * jresult ;
  std::pair< std::string,std::string > *result = 0 ;
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairStringString__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairStringString__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairStringString_first_set(void * jarg1, char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_PairStringString_first_get(void * jarg1) {
  char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairStringString_second_set(void * jarg1, char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_PairStringString_second_get(void * jarg1) {
  char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairStringString(void * jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt64Int64__SWIG_0() {
  void * jresult ;
  std::pair< int64_t,int64_t > *result = 0 ;
  
  result = (std::pair< int64_t,int64_t > *)new std::pair< int64_t,int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt64Int64__SWIG_1(long long jarg1, long long jarg2) {
  void * jresult ;
  long long arg1 ;
  long long arg2 ;
  std::pair< int64_t,int64_t > *result = 0 ;
  
  arg1 = (long long)jarg1; 
  arg2 = (long long)jarg2; 
  result = (std::pair< int64_t,int64_t > *)new std::pair< int64_t,int64_t >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt64Int64__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< int64_t,int64_t > *arg1 = 0 ;
  std::pair< int64_t,int64_t > *result = 0 ;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< int64_t,int64_t > *)new std::pair< int64_t,int64_t >((std::pair< int64_t,int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairInt64Int64_first_set(void * jarg1, long long jarg2) {
  std::pair< int64_t,int64_t > *arg1 = (std::pair< int64_t,int64_t > *) 0 ;
  long long arg2 ;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_PairInt64Int64_first_get(void * jarg1) {
  long long jresult ;
  std::pair< int64_t,int64_t > *arg1 = (std::pair< int64_t,int64_t > *) 0 ;
  long long result;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1; 
  result = (long long) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairInt64Int64_second_set(void * jarg1, long long jarg2) {
  std::pair< int64_t,int64_t > *arg1 = (std::pair< int64_t,int64_t > *) 0 ;
  long long arg2 ;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_TileDB_PairInt64Int64_second_get(void * jarg1) {
  long long jresult ;
  std::pair< int64_t,int64_t > *arg1 = (std::pair< int64_t,int64_t > *) 0 ;
  long long result;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1; 
  result = (long long) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairInt64Int64(void * jarg1) {
  std::pair< int64_t,int64_t > *arg1 = (std::pair< int64_t,int64_t > *) 0 ;
  
  arg1 = (std::pair< int64_t,int64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt64UInt64__SWIG_0() {
  void * jresult ;
  std::pair< uint64_t,uint64_t > *result = 0 ;
  
  result = (std::pair< uint64_t,uint64_t > *)new std::pair< uint64_t,uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt64UInt64__SWIG_1(unsigned long long jarg1, unsigned long long jarg2) {
  void * jresult ;
  unsigned long long arg1 ;
  unsigned long long arg2 ;
  std::pair< uint64_t,uint64_t > *result = 0 ;
  
  arg1 = (unsigned long long)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  result = (std::pair< uint64_t,uint64_t > *)new std::pair< uint64_t,uint64_t >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt64UInt64__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< uint64_t,uint64_t > *arg1 = 0 ;
  std::pair< uint64_t,uint64_t > *result = 0 ;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< uint64_t,uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< uint64_t,uint64_t > *)new std::pair< uint64_t,uint64_t >((std::pair< uint64_t,uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairUInt64UInt64_first_set(void * jarg1, unsigned long long jarg2) {
  std::pair< uint64_t,uint64_t > *arg1 = (std::pair< uint64_t,uint64_t > *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_PairUInt64UInt64_first_get(void * jarg1) {
  unsigned long long jresult ;
  std::pair< uint64_t,uint64_t > *arg1 = (std::pair< uint64_t,uint64_t > *) 0 ;
  unsigned long long result;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1; 
  result = (unsigned long long) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairUInt64UInt64_second_set(void * jarg1, unsigned long long jarg2) {
  std::pair< uint64_t,uint64_t > *arg1 = (std::pair< uint64_t,uint64_t > *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_PairUInt64UInt64_second_get(void * jarg1) {
  unsigned long long jresult ;
  std::pair< uint64_t,uint64_t > *arg1 = (std::pair< uint64_t,uint64_t > *) 0 ;
  unsigned long long result;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1; 
  result = (unsigned long long) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairUInt64UInt64(void * jarg1) {
  std::pair< uint64_t,uint64_t > *arg1 = (std::pair< uint64_t,uint64_t > *) 0 ;
  
  arg1 = (std::pair< uint64_t,uint64_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt32Int32__SWIG_0() {
  void * jresult ;
  std::pair< int32_t,int32_t > *result = 0 ;
  
  result = (std::pair< int32_t,int32_t > *)new std::pair< int32_t,int32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt32Int32__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  std::pair< int32_t,int32_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< int32_t,int32_t > *)new std::pair< int32_t,int32_t >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairInt32Int32__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< int32_t,int32_t > *arg1 = 0 ;
  std::pair< int32_t,int32_t > *result = 0 ;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int32_t,int32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< int32_t,int32_t > *)new std::pair< int32_t,int32_t >((std::pair< int32_t,int32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairInt32Int32_first_set(void * jarg1, int jarg2) {
  std::pair< int32_t,int32_t > *arg1 = (std::pair< int32_t,int32_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_PairInt32Int32_first_get(void * jarg1) {
  int jresult ;
  std::pair< int32_t,int32_t > *arg1 = (std::pair< int32_t,int32_t > *) 0 ;
  int result;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1; 
  result = (int) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairInt32Int32_second_set(void * jarg1, int jarg2) {
  std::pair< int32_t,int32_t > *arg1 = (std::pair< int32_t,int32_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_PairInt32Int32_second_get(void * jarg1) {
  int jresult ;
  std::pair< int32_t,int32_t > *arg1 = (std::pair< int32_t,int32_t > *) 0 ;
  int result;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1; 
  result = (int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairInt32Int32(void * jarg1) {
  std::pair< int32_t,int32_t > *arg1 = (std::pair< int32_t,int32_t > *) 0 ;
  
  arg1 = (std::pair< int32_t,int32_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt32UInt32__SWIG_0() {
  void * jresult ;
  std::pair< uint32_t,uint32_t > *result = 0 ;
  
  result = (std::pair< uint32_t,uint32_t > *)new std::pair< uint32_t,uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt32UInt32__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::pair< uint32_t,uint32_t > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::pair< uint32_t,uint32_t > *)new std::pair< uint32_t,uint32_t >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairUInt32UInt32__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< uint32_t,uint32_t > *arg1 = 0 ;
  std::pair< uint32_t,uint32_t > *result = 0 ;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< uint32_t,uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< uint32_t,uint32_t > *)new std::pair< uint32_t,uint32_t >((std::pair< uint32_t,uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairUInt32UInt32_first_set(void * jarg1, unsigned int jarg2) {
  std::pair< uint32_t,uint32_t > *arg1 = (std::pair< uint32_t,uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_PairUInt32UInt32_first_get(void * jarg1) {
  unsigned int jresult ;
  std::pair< uint32_t,uint32_t > *arg1 = (std::pair< uint32_t,uint32_t > *) 0 ;
  unsigned int result;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1; 
  result = (unsigned int) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairUInt32UInt32_second_set(void * jarg1, unsigned int jarg2) {
  std::pair< uint32_t,uint32_t > *arg1 = (std::pair< uint32_t,uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_PairUInt32UInt32_second_get(void * jarg1) {
  unsigned int jresult ;
  std::pair< uint32_t,uint32_t > *arg1 = (std::pair< uint32_t,uint32_t > *) 0 ;
  unsigned int result;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1; 
  result = (unsigned int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairUInt32UInt32(void * jarg1) {
  std::pair< uint32_t,uint32_t > *arg1 = (std::pair< uint32_t,uint32_t > *) 0 ;
  
  arg1 = (std::pair< uint32_t,uint32_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairDoubleDouble__SWIG_0() {
  void * jresult ;
  std::pair< double,double > *result = 0 ;
  
  result = (std::pair< double,double > *)new std::pair< double,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairDoubleDouble__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  std::pair< double,double > *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (std::pair< double,double > *)new std::pair< double,double >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_PairDoubleDouble__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< double,double > *arg1 = 0 ;
  std::pair< double,double > *result = 0 ;
  
  arg1 = (std::pair< double,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< double,double > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< double,double > *)new std::pair< double,double >((std::pair< double,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairDoubleDouble_first_set(void * jarg1, double jarg2) {
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double arg2 ;
  
  arg1 = (std::pair< double,double > *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_PairDoubleDouble_first_get(void * jarg1) {
  double jresult ;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double result;
  
  arg1 = (std::pair< double,double > *)jarg1; 
  result = (double) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_PairDoubleDouble_second_set(void * jarg1, double jarg2) {
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double arg2 ;
  
  arg1 = (std::pair< double,double > *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TileDB_PairDoubleDouble_second_get(void * jarg1) {
  double jresult ;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double result;
  
  arg1 = (std::pair< double,double > *)jarg1; 
  result = (double) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_PairDoubleDouble(void * jarg1) {
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  
  arg1 = (std::pair< double,double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringPairUInt64UInt64__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *result = 0 ;
  
  result = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)new std::map< std::string,std::pair< uint64_t,uint64_t > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringPairUInt64UInt64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = 0 ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< uint64_t,uint64_t > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)new std::map< std::string,std::pair< uint64_t,uint64_t > >((std::map< std::string,std::pair< uint64_t,uint64_t > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::size_type result;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  result = ((std::map< std::string,std::pair< uint64_t,uint64_t > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  result = (bool)((std::map< std::string,std::pair< uint64_t,uint64_t > > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_Clear(void * jarg1) {
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_getitem(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *) &std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_setitem(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__setitem(arg1,(std::string const &)*arg2,(std::pair< unsigned long long,unsigned long long > const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_Add(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< unsigned long long,unsigned long long > >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__Add(arg1,(std::string const &)*arg2,(std::pair< unsigned long long,unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  result = (std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  arg2 = (std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,std::pair< unsigned long long,unsigned long long > >::key_type *) &std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairUInt64UInt64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  arg2 = (std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_pair_Sl_uint64_t_Sc_uint64_t_Sg__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringPairUInt64UInt64(void * jarg1) {
  std::map< std::string,std::pair< uint64_t,uint64_t > > *arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< uint64_t,uint64_t > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringPairInt64Int64__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *result = 0 ;
  
  result = (std::map< std::string,std::pair< int64_t,int64_t > > *)new std::map< std::string,std::pair< int64_t,int64_t > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_MapStringPairInt64Int64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = 0 ;
  std::map< std::string,std::pair< int64_t,int64_t > > *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< int64_t,int64_t > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::pair< int64_t,int64_t > > *)new std::map< std::string,std::pair< int64_t,int64_t > >((std::map< std::string,std::pair< int64_t,int64_t > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::size_type result;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  result = ((std::map< std::string,std::pair< int64_t,int64_t > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  result = (bool)((std::map< std::string,std::pair< int64_t,int64_t > > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_Clear(void * jarg1) {
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_getitem(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< long long,long long > >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< long long,long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,std::pair< long long,long long > >::mapped_type *) &std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_setitem(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< long long,long long > >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::pair< long long,long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,std::pair< long long,long long > >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< long long,long long > >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__setitem(arg1,(std::string const &)*arg2,(std::pair< long long,long long > const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< long long,long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_Add(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *arg2 = 0 ;
  std::map< std::string,std::pair< long long,long long > >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::pair< long long,long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,std::pair< long long,long long > >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::pair< long long,long long > >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__Add(arg1,(std::string const &)*arg2,(std::pair< long long,long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::pair< long long,long long > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  result = (std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::pair< long long,long long > >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  arg2 = (std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,std::pair< long long,long long > >::key_type *) &std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_MapStringPairInt64Int64_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  arg2 = (std::map< std::string,std::pair< int64_t,int64_t >,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_pair_Sl_int64_t_Sc_int64_t_Sg__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_MapStringPairInt64Int64(void * jarg1) {
  std::map< std::string,std::pair< int64_t,int64_t > > *arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *) 0 ;
  
  arg1 = (std::map< std::string,std::pair< int64_t,int64_t > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_TileDBError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::TileDBError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (tiledb::TileDBError *)new tiledb::TileDBError((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::TileDBError >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_TileDBError(void * jarg1) {
  tiledb::TileDBError *arg1 = (tiledb::TileDBError *) 0 ;
  std::shared_ptr< tiledb::TileDBError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::TileDBError > *)jarg1;
  arg1 = (tiledb::TileDBError *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_TypeError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::TypeError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (tiledb::TypeError *)new tiledb::TypeError((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::TypeError >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_TypeError(void * jarg1) {
  tiledb::TypeError *arg1 = (tiledb::TypeError *) 0 ;
  std::shared_ptr< tiledb::TypeError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::TypeError > *)jarg1;
  arg1 = (tiledb::TypeError *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_SchemaMismatch(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::SchemaMismatch *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (tiledb::SchemaMismatch *)new tiledb::SchemaMismatch((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::SchemaMismatch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_SchemaMismatch(void * jarg1) {
  tiledb::SchemaMismatch *arg1 = (tiledb::SchemaMismatch *) 0 ;
  std::shared_ptr< tiledb::SchemaMismatch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::SchemaMismatch > *)jarg1;
  arg1 = (tiledb::SchemaMismatch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_AttributeError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::AttributeError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (tiledb::AttributeError *)new tiledb::AttributeError((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::AttributeError >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_AttributeError(void * jarg1) {
  tiledb::AttributeError *arg1 = (tiledb::AttributeError *) 0 ;
  std::shared_ptr< tiledb::AttributeError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::AttributeError > *)jarg1;
  arg1 = (tiledb::AttributeError *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Array__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::QueryType arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::QueryType)jarg3; 
  {
    try {
      result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Array__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::QueryType arg3 ;
  tiledb::EncryptionType arg4 ;
  std::string *arg5 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::QueryType)jarg3; 
  arg4 = (tiledb::EncryptionType)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Array__SWIG_2(void * jarg1, char * jarg2, int jarg3, unsigned long long jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::QueryType arg3 ;
  uint64_t arg4 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::QueryType)jarg3; 
  arg4 = (uint64_t)jarg4; 
  {
    try {
      result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Array__SWIG_3(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5, unsigned long long jarg6) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::QueryType arg3 ;
  tiledb::EncryptionType arg4 ;
  std::string *arg5 = 0 ;
  uint64_t arg6 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::QueryType)jarg3; 
  arg4 = (tiledb::EncryptionType)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (uint64_t)jarg6; 
  {
    try {
      result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Array__SWIG_4(void * jarg1) {
  void * jresult ;
  tiledb::Array *arg1 = 0 ;
  tiledb::Array *result = 0 ;
  
  
  arg1 = (tiledb::Array *)(((std::shared_ptr< const tiledb::Array > *)jarg1) ? ((std::shared_ptr< const tiledb::Array > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Array const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Array *)new tiledb::Array((tiledb::Array const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Array(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Array_is_open(void * jarg1) {
  unsigned int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((tiledb::Array const *)arg1)->is_open();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Array_uri(void * jarg1) {
  char * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Array const *)arg1)->uri();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Array_schema(void * jarg1) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  tiledb::ArraySchema result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Array const *)arg1)->schema();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(new tiledb::ArraySchema((tiledb::ArraySchema &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_open__SWIG_0(void * jarg1, int jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb::QueryType arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::QueryType)jarg2; 
  {
    try {
      (arg1)->open(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_open__SWIG_1(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb::QueryType arg2 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::QueryType)jarg2; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      (arg1)->open(arg2,arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_open__SWIG_2(void * jarg1, int jarg2, unsigned long long jarg3) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb::QueryType arg2 ;
  uint64_t arg3 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::QueryType)jarg2; 
  arg3 = (uint64_t)jarg3; 
  {
    try {
      (arg1)->open(arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_open__SWIG_3(void * jarg1, int jarg2, int jarg3, char * jarg4, unsigned long long jarg5) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb::QueryType arg2 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::QueryType)jarg2; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint64_t)jarg5; 
  {
    try {
      (arg1)->open(arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_reopen(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->reopen();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_reopen_at(void * jarg1, unsigned long long jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  {
    try {
      (arg1)->reopen_at(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Array_timestamp(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint64_t)((tiledb::Array const *)arg1)->timestamp();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_close(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->close();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  {
    try {
      tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  arg4 = jarg4; 
  arg5 = (uint32_t)jarg5; 
  {
    try {
      tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(void const *)arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_vacuum__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  {
    try {
      tiledb::Array::vacuum((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_vacuum__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      tiledb::Array::vacuum((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate__SWIG_3(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  tiledb::Config *arg5 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg5 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  
  smartarg5 = (std::shared_ptr<  tiledb::Config > *)jarg5;
  arg5 = (tiledb::Config *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate__SWIG_4(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_create__SWIG_0(char * jarg1, void * jarg2) {
  std::string *arg1 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > tempnull2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::ArraySchema > *)jarg2 : &tempnull2; 
  {
    try {
      tiledb::Array::create((std::string const &)*arg1,(std::shared_ptr< tiledb::ArraySchema > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Array_load_schema(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::ArraySchema > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = tiledb::Array::load_schema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< tiledb::ArraySchema >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_create__SWIG_1(char * jarg1, void * jarg2, int jarg3, char * jarg4) {
  std::string *arg1 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > tempnull2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::ArraySchema > *)jarg2 : &tempnull2; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      tiledb::Array::create((std::string const &)*arg1,(std::shared_ptr< tiledb::ArraySchema > const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Array_encryption_type(void * jarg1, char * jarg2) {
  int jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::EncryptionType result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (tiledb::EncryptionType)tiledb::Array::encryption_type((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Array_non_empty_domain_var__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  std::pair< std::string,std::string > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (arg1)->non_empty_domain_var(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Array_non_empty_domain_var__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  std::pair< std::string,std::string > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->non_empty_domain_var((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Array_query_type(void * jarg1) {
  int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  tiledb::QueryType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::QueryType)((tiledb::Array const *)arg1)->query_type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate_metadata__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  {
    try {
      tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate_metadata__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate_metadata__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  arg4 = jarg4; 
  arg5 = (uint32_t)jarg5; 
  {
    try {
      tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(void const *)arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate_metadata__SWIG_3(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  tiledb::Config *arg5 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg5 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  
  smartarg5 = (std::shared_ptr<  tiledb::Config > *)jarg5;
  arg5 = (tiledb::Config *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_consolidate_metadata__SWIG_4(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Array_delete_metadata(void * jarg1, char * jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->delete_metadata((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Array_has_metadata(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  tiledb::DataType arg3 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::DataType)jarg3; 
  {
    try {
      result = (bool)(arg1)->has_metadata((std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Array_metadata_num(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint64_t)((tiledb::Array const *)arg1)->metadata_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArraySchema__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb::ArrayType arg2 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = (tiledb::ArrayType)jarg2; 
  {
    try {
      result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArraySchema__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArraySchema__SWIG_2(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::EncryptionType arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::EncryptionType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArraySchema__SWIG_3() {
  void * jresult ;
  tiledb::ArraySchema *result = 0 ;
  
  {
    try {
      result = (tiledb::ArraySchema *)new tiledb::ArraySchema();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArraySchema__SWIG_4(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  arg1 = (tiledb::ArraySchema *)(((std::shared_ptr< const tiledb::ArraySchema > *)jarg1) ? ((std::shared_ptr< const tiledb::ArraySchema > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::ArraySchema const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArraySchema *)new tiledb::ArraySchema((tiledb::ArraySchema const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_ArraySchema(void * jarg1) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_ArraySchema_dump(void * jarg1, char * jarg2) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::ArraySchema const *)arg1)->dump((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_ArraySchema_array_type(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::ArrayType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::ArrayType)((tiledb::ArraySchema const *)arg1)->array_type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_ArraySchema_capacity(void * jarg1) {
  unsigned long long jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint64_t)((tiledb::ArraySchema const *)arg1)->capacity();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_capacity(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_capacity(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_ArraySchema_allows_dups(void * jarg1) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((tiledb::ArraySchema const *)arg1)->allows_dups();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_allows_dups(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  bool arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_allows_dups(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_ArraySchema_tile_order(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::LayoutType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::LayoutType)((tiledb::ArraySchema const *)arg1)->tile_order();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_tile_order(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::LayoutType arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::LayoutType)jarg2; 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_tile_order(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_order(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::LayoutType arg2 ;
  tiledb::LayoutType arg3 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::LayoutType)jarg2; 
  arg3 = (tiledb::LayoutType)jarg3; 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_order(arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_ArraySchema_cell_order(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::LayoutType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::LayoutType)((tiledb::ArraySchema const *)arg1)->cell_order();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_cell_order(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::LayoutType arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::LayoutType)jarg2; 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_cell_order(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_coords_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->coords_filter_list();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_coords_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_coords_filter_list((tiledb::FilterList const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_offsets_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->offsets_filter_list();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_offsets_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_offsets_filter_list((tiledb::FilterList const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_domain(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Domain > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->domain();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Domain >(new tiledb::Domain((tiledb::Domain &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_set_domain(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::Domain *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Domain *)(((std::shared_ptr< const tiledb::Domain > *)jarg2) ? ((std::shared_ptr< const tiledb::Domain > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Domain const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->set_domain((tiledb::Domain const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_add_attribute__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::Attribute *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Attribute *)(((std::shared_ptr< const tiledb::Attribute > *)jarg2) ? ((std::shared_ptr< const tiledb::Attribute > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Attribute const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArraySchema *) &(arg1)->add_attribute((tiledb::Attribute const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_ArraySchema_check(void * jarg1) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((tiledb::ArraySchema const *)arg1)->check();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_attribute_names(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->attribute_names();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_attribute__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->attribute((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_ArraySchema_attribute_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((tiledb::ArraySchema const *)arg1)->attribute_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_attribute__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->attribute(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_ArraySchema_has_attribute(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::ArraySchema const *)arg1)->has_attribute((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_ArraySchema_to_info_str(void * jarg1) {
  char * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->to_info_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_ArraySchema_to_str__SWIG_0(int jarg1) {
  char * jresult ;
  tiledb::ArrayType arg1 ;
  std::string result;
  
  arg1 = (tiledb::ArrayType)jarg1; 
  {
    try {
      result = tiledb::ArraySchema::to_str(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_ArraySchema_to_str__SWIG_1(int jarg1) {
  char * jresult ;
  tiledb::LayoutType arg1 ;
  std::string result;
  
  arg1 = (tiledb::LayoutType)jarg1; 
  {
    try {
      result = tiledb::ArraySchema::to_str(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_dimension_names(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->dimension_names();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_ArraySchema_has_dimension(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::ArraySchema const *)arg1)->has_dimension((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_dimension__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->dimension(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_ArraySchema_dimension__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::ArraySchema const *)arg1)->dimension((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_ArraySchema_add_int_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->add_int_dimension((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_ArraySchema_add_attribute__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  tiledb::DataType arg3 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::DataType)jarg3; 
  {
    try {
      (arg1)->add_attribute((std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_ArraySchema_to_json_str(void * jarg1) {
  char * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->to_json_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArrayUtil__SWIG_0() {
  void * jresult ;
  tiledb::ArrayUtil *result = 0 ;
  
  {
    try {
      result = (tiledb::ArrayUtil *)new tiledb::ArrayUtil();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_ArrayUtil__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::ArrayUtil *arg1 = 0 ;
  tiledb::ArrayUtil *result = 0 ;
  
  arg1 = (tiledb::ArrayUtil *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::ArrayUtil const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::ArrayUtil *)new tiledb::ArrayUtil((tiledb::ArrayUtil const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_ArrayUtil(void * jarg1) {
  tiledb::ArrayUtil *arg1 = (tiledb::ArrayUtil *) 0 ;
  
  arg1 = (tiledb::ArrayUtil *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_ArrayUtil_get_tiledb_version() {
  char * jresult ;
  std::string result;
  
  {
    try {
      result = tiledb::ArrayUtil::get_tiledb_version();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Attribute__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::DataType arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Attribute *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::DataType)jarg3; 
  {
    try {
      result = (tiledb::Attribute *)new tiledb::Attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Attribute__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::DataType arg3 ;
  tiledb::FilterList *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Attribute *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::DataType)jarg3; 
  
  arg4 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg4) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Attribute *)new tiledb::Attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(tiledb::FilterList const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Attribute__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Attribute *arg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  arg1 = (tiledb::Attribute *)(((std::shared_ptr< const tiledb::Attribute > *)jarg1) ? ((std::shared_ptr< const tiledb::Attribute > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Attribute const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Attribute *)new tiledb::Attribute((tiledb::Attribute const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Attribute_name(void * jarg1) {
  char * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Attribute const *)arg1)->name();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Attribute_type(void * jarg1) {
  int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  tiledb::DataType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::DataType)((tiledb::Attribute const *)arg1)->type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Attribute_cell_size(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint64_t)((tiledb::Attribute const *)arg1)->cell_size();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Attribute_cell_val_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((tiledb::Attribute const *)arg1)->cell_val_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Attribute_set_cell_val_num(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (tiledb::Attribute *) &(arg1)->set_cell_val_num(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Attribute_variable_sized(void * jarg1) {
  unsigned int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((tiledb::Attribute const *)arg1)->variable_sized();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Attribute_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Attribute const *)arg1)->filter_list();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Attribute_set_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Attribute *) &(arg1)->set_filter_list((tiledb::FilterList const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Attribute_dump(void * jarg1, char * jarg2) {
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::Attribute const *)arg1)->dump((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Attribute_is_valid_intdatatype(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  {
    try {
      result = (bool)tiledb::Attribute::is_valid_intdatatype(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Attribute_create_attribute(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::DataType arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb::DataType)jarg3; 
  {
    try {
      result = tiledb::Attribute::create_attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Attribute(void * jarg1) {
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Config__SWIG_0() {
  void * jresult ;
  tiledb::Config *result = 0 ;
  
  {
    try {
      result = (tiledb::Config *)new tiledb::Config();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Config__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (tiledb::Config *)new tiledb::Config((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Config_save_to_file(void * jarg1, char * jarg2) {
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string arg2 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      (arg1)->save_to_file(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Config_set(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (tiledb::Config *) &(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Config_get(void * jarg1, char * jarg2) {
  char * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Config const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::Config const *)arg1)->get((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Config_unset(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (tiledb::Config *) &(arg1)->unset((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Config(void * jarg1) {
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Context__SWIG_0() {
  void * jresult ;
  tiledb::Context *result = 0 ;
  
  {
    try {
      result = (tiledb::Context *)new tiledb::Context();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Context__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::Config *arg1 = 0 ;
  tiledb::Context *result = 0 ;
  
  
  arg1 = (tiledb::Config *)(((std::shared_ptr< const tiledb::Config > *)jarg1) ? ((std::shared_ptr< const tiledb::Config > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Config const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Context *)new tiledb::Context((tiledb::Config const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Context_handle_error(void * jarg1, int jarg2) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  int arg2 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      ((tiledb::Context const *)arg1)->handle_error(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Context_config(void * jarg1) {
  void * jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  tiledb::Config result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Context const *)arg1)->config();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Config >(new tiledb::Config((tiledb::Config &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Context_is_supported_fs(void * jarg1, int jarg2) {
  unsigned int jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  tiledb::FilesystemType arg2 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::FilesystemType)jarg2; 
  {
    try {
      result = (bool)((tiledb::Context const *)arg1)->is_supported_fs(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Context_cancel_tasks(void * jarg1) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((tiledb::Context const *)arg1)->cancel_tasks();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Context_set_tag(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::Context > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->set_tag((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Context_default_error_handler(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      tiledb::Context::default_error_handler((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Context(void * jarg1) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Dimension__SWIG_0(void * jarg1) {
  void * jresult ;
  tiledb::Dimension *arg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  arg1 = (tiledb::Dimension *)(((std::shared_ptr< const tiledb::Dimension > *)jarg1) ? ((std::shared_ptr< const tiledb::Dimension > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Dimension const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Dimension *)new tiledb::Dimension((tiledb::Dimension const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Dimension_cell_val_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((tiledb::Dimension const *)arg1)->cell_val_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_set_cell_val_num(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (tiledb::Dimension *) &(arg1)->set_cell_val_num(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Dimension const *)arg1)->filter_list();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_set_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Dimension *) &(arg1)->set_filter_list((tiledb::FilterList const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Dimension_name(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Dimension const *)arg1)->name();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Dimension_type(void * jarg1) {
  int jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  tiledb::DataType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::DataType)((tiledb::Dimension const *)arg1)->type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Dimension_domain_to_str(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Dimension const *)arg1)->domain_to_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Dimension_tile_extent_to_str(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Dimension const *)arg1)->tile_extent_to_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Dimension_is_valid_intdatatype(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  {
    try {
      result = (bool)tiledb::Dimension::is_valid_intdatatype(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_dimension(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  {
    try {
      result = tiledb::Dimension::create_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_int32_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = tiledb::Dimension::create_int32_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_int64_dimension(void * jarg1, char * jarg2, long long jarg3, long long jarg4, long long jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  {
    try {
      result = tiledb::Dimension::create_int64_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_uint64_dimension(void * jarg1, char * jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try {
      result = tiledb::Dimension::create_uint64_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_double_dimension(void * jarg1, char * jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = tiledb::Dimension::create_double_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Dimension_create_string_dimension(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = tiledb::Dimension::create_string_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Dimension(void * jarg1) {
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Domain__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Domain *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  {
    try {
      result = (tiledb::Domain *)new tiledb::Domain((std::shared_ptr< tiledb::Context > const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Domain__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::Domain *arg1 = 0 ;
  tiledb::Domain *result = 0 ;
  
  
  arg1 = (tiledb::Domain *)(((std::shared_ptr< const tiledb::Domain > *)jarg1) ? ((std::shared_ptr< const tiledb::Domain > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Domain const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Domain *)new tiledb::Domain((tiledb::Domain const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Domain_cell_num(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint64_t)((tiledb::Domain const *)arg1)->cell_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_dump(void * jarg1, char * jarg2) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::Domain const *)arg1)->dump((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Domain_type(void * jarg1) {
  int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  tiledb::DataType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::DataType)((tiledb::Domain const *)arg1)->type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Domain_ndim(void * jarg1) {
  unsigned int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((tiledb::Domain const *)arg1)->ndim();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Domain_dimension_names(void * jarg1) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Domain const *)arg1)->dimension_names();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Domain_dimension__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((tiledb::Domain const *)arg1)->dimension(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Domain_dimension__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::Domain const *)arg1)->dimension((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Domain_add_dimension(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  tiledb::Dimension *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  tiledb::Domain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Dimension *)(((std::shared_ptr< const tiledb::Dimension > *)jarg2) ? ((std::shared_ptr< const tiledb::Dimension > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Dimension const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Domain *) &(arg1)->add_dimension((tiledb::Dimension const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_add_int32_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->add_int32_dimension((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_add_int64_dimension(void * jarg1, char * jarg2, long long jarg3, long long jarg4, long long jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  {
    try {
      (arg1)->add_int64_dimension((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_add_uint64_dimension(void * jarg1, char * jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try {
      (arg1)->add_uint64_dimension((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_add_double_dimension(void * jarg1, char * jarg2, double jarg3, double jarg4, double jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->add_double_dimension((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Domain_add_string_dimension(void * jarg1, char * jarg2) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->add_string_dimension((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Domain_has_dimension(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::Domain const *)arg1)->has_dimension((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Domain(void * jarg1) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Filter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb::FilterType arg2 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Filter *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = (tiledb::FilterType)jarg2; 
  {
    try {
      result = (tiledb::Filter *)new tiledb::Filter((std::shared_ptr< tiledb::Context > const &)*arg1,arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Filter__SWIG_1() {
  void * jresult ;
  tiledb::Filter *result = 0 ;
  
  {
    try {
      result = (tiledb::Filter *)new tiledb::Filter();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Filter__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Filter *arg1 = 0 ;
  tiledb::Filter *result = 0 ;
  
  
  arg1 = (tiledb::Filter *)(((std::shared_ptr< const tiledb::Filter > *)jarg1) ? ((std::shared_ptr< const tiledb::Filter > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Filter const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Filter *)new tiledb::Filter((tiledb::Filter const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Filter_filter_type(void * jarg1) {
  int jresult ;
  tiledb::Filter *arg1 = (tiledb::Filter *) 0 ;
  std::shared_ptr< tiledb::Filter const > *smartarg1 = 0 ;
  tiledb::FilterType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Filter > *)jarg1;
  arg1 = (tiledb::Filter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::FilterType)((tiledb::Filter const *)arg1)->filter_type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Filter_to_str(int jarg1) {
  char * jresult ;
  tiledb::FilterType arg1 ;
  std::string result;
  
  arg1 = (tiledb::FilterType)jarg1; 
  {
    try {
      result = tiledb::Filter::to_str(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Filter(void * jarg1) {
  tiledb::Filter *arg1 = (tiledb::Filter *) 0 ;
  std::shared_ptr< tiledb::Filter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Filter > *)jarg1;
  arg1 = (tiledb::Filter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_FilterList__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::FilterList *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  {
    try {
      result = (tiledb::FilterList *)new tiledb::FilterList((std::shared_ptr< tiledb::Context > const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_FilterList__SWIG_1() {
  void * jresult ;
  tiledb::FilterList *result = 0 ;
  
  {
    try {
      result = (tiledb::FilterList *)new tiledb::FilterList();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_FilterList__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::FilterList *arg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  arg1 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg1) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::FilterList *)new tiledb::FilterList((tiledb::FilterList const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_FilterList_add_filter(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  tiledb::Filter *arg2 = 0 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Filter *)(((std::shared_ptr< const tiledb::Filter > *)jarg2) ? ((std::shared_ptr< const tiledb::Filter > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Filter const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::FilterList *) &(arg1)->add_filter((tiledb::Filter const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_FilterList_filter(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  tiledb::Filter result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((tiledb::FilterList const *)arg1)->filter(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Filter >(new tiledb::Filter((tiledb::Filter &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_FilterList_max_chunk_size(void * jarg1) {
  unsigned int jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint32_t)((tiledb::FilterList const *)arg1)->max_chunk_size();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_FilterList_nfilters(void * jarg1) {
  unsigned int jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint32_t)((tiledb::FilterList const *)arg1)->nfilters();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_FilterList_set_max_chunk_size(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (tiledb::FilterList *) &(arg1)->set_max_chunk_size(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_FilterList(void * jarg1) {
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_create_group(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      tiledb::create_group((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Query__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Array > *arg2 = 0 ;
  tiledb::QueryType arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Array > tempnull2 ;
  tiledb::Query *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::Array > *)jarg2 : &tempnull2; 
  arg3 = (tiledb::QueryType)jarg3; 
  {
    try {
      result = (tiledb::Query *)new tiledb::Query((std::shared_ptr< tiledb::Context > const &)*arg1,(std::shared_ptr< tiledb::Array > const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Query__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Array > *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Array > tempnull2 ;
  tiledb::Query *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::Array > *)jarg2 : &tempnull2; 
  {
    try {
      result = (tiledb::Query *)new tiledb::Query((std::shared_ptr< tiledb::Context > const &)*arg1,(std::shared_ptr< tiledb::Array > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Query__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  arg1 = (tiledb::Query *)(((std::shared_ptr< const tiledb::Query > *)jarg1) ? ((std::shared_ptr< const tiledb::Query > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Query const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::Query *)new tiledb::Query((tiledb::Query const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_context(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Context > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::shared_ptr< tiledb::Context > *) &(arg1)->context();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = *result ? new std::shared_ptr< tiledb::Context >(*result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Query_query_type(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb::QueryType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::QueryType)((tiledb::Query const *)arg1)->query_type();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_set_layout(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  tiledb::LayoutType arg2 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb::LayoutType)jarg2; 
  {
    try {
      result = (tiledb::Query *) &(arg1)->set_layout(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Query_query_layout(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb::LayoutType result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::LayoutType)((tiledb::Query const *)arg1)->query_layout();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_array(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Array > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::shared_ptr< tiledb::Array > *) &(arg1)->array();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = *result ? new std::shared_ptr< tiledb::Array >(*result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Query_query_status(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb::QueryStatus result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::QueryStatus)((tiledb::Query const *)arg1)->query_status();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Query_has_results(void * jarg1) {
  unsigned int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((tiledb::Query const *)arg1)->has_results();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileDB_Query_submit(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::QueryStatus result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tiledb::QueryStatus)(arg1)->submit();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_finalize(void * jarg1) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->finalize();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_result_buffer_elements(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::Query const *)arg1)->result_buffer_elements();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > >((const std::map< std::string,std::pair< uint64_t,uint64_t >,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_add_range(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (tiledb::Query *) &(arg1)->add_range(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Query_range_num(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (uint64_t)((tiledb::Query const *)arg1)->range_num(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_range(void * jarg1, unsigned int jarg2, unsigned long long jarg3) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::pair< std::string,std::string > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  {
    try {
      result = (arg1)->range(arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_Query_est_result_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (uint64_t)((tiledb::Query const *)arg1)->est_result_size((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_est_result_size_var(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::pair< uint64_t,uint64_t > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::Query const *)arg1)->est_result_size_var((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::pair< uint64_t,uint64_t >((const std::pair< uint64_t,uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_Query_fragment_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (uint32_t)((tiledb::Query const *)arg1)->fragment_num();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Query_fragment_uri(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((tiledb::Query const *)arg1)->fragment_uri(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_Query_fragment_timestamp_range(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::pair< uint64_t,uint64_t > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((tiledb::Query const *)arg1)->fragment_timestamp_range(arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::pair< uint64_t,uint64_t >((const std::pair< uint64_t,uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int32_subarray(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int32_subarray((std::vector< int > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint32_subarray(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint32_subarray((std::vector< uint32_t > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int64_subarray(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int64_subarray((std::vector< int64_t > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint64_subarray(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint64_subarray((std::vector< uint64_t > const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int32_coordinates(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int32_coordinates(*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint32_coordinates(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint32_coordinates(*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int64_coordinates(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int64_coordinates(*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint64_coordinates(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint64_coordinates(*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_double_coordinates(void * jarg1, void * jarg2) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_double_coordinates(*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int32_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int32_vector_buffer((std::string const &)*arg2,*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_int64_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_int64_vector_buffer((std::string const &)*arg2,*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint32_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint32_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< uint32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint32_vector_buffer((std::string const &)*arg2,*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_uint64_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_uint64_vector_buffer((std::string const &)*arg2,*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Query_set_double_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_double_vector_buffer((std::string const &)*arg2,*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Query_to_str(int jarg1) {
  char * jresult ;
  tiledb::QueryType arg1 ;
  std::string result;
  
  arg1 = (tiledb::QueryType)jarg1; 
  {
    try {
      result = tiledb::Query::to_str(arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Query(void * jarg1) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_QueryCondition__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::QueryCondition *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  {
    try {
      result = (tiledb::QueryCondition *)new tiledb::QueryCondition((std::shared_ptr< tiledb::Context > const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::QueryCondition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_QueryCondition__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::QueryCondition *arg1 = 0 ;
  tiledb::QueryCondition *result = 0 ;
  
  
  arg1 = (tiledb::QueryCondition *)(((std::shared_ptr< const tiledb::QueryCondition > *)jarg1) ? ((std::shared_ptr< const tiledb::QueryCondition > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::QueryCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::QueryCondition *)new tiledb::QueryCondition((tiledb::QueryCondition const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::QueryCondition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_QueryCondition(void * jarg1) {
  tiledb::QueryCondition *arg1 = (tiledb::QueryCondition *) 0 ;
  std::shared_ptr< tiledb::QueryCondition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::QueryCondition > *)jarg1;
  arg1 = (tiledb::QueryCondition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_QueryCondition_init(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  tiledb::QueryCondition *arg1 = (tiledb::QueryCondition *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  tiledb::QueryConditionOperatorType arg4 ;
  std::shared_ptr< tiledb::QueryCondition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::QueryCondition > *)jarg1;
  arg1 = (tiledb::QueryCondition *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (tiledb::QueryConditionOperatorType)jarg4; 
  {
    try {
      (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_QueryCondition_combine(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  tiledb::QueryCondition *arg1 = (tiledb::QueryCondition *) 0 ;
  tiledb::QueryCondition *arg2 = 0 ;
  tiledb::QueryConditionCombinationOperatorType arg3 ;
  std::shared_ptr< tiledb::QueryCondition const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::QueryCondition > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::QueryCondition > *)jarg1;
  arg1 = (tiledb::QueryCondition *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::QueryCondition *)(((std::shared_ptr< const tiledb::QueryCondition > *)jarg2) ? ((std::shared_ptr< const tiledb::QueryCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::QueryCondition const & reference is null", 0);
    return 0;
  } 
  arg3 = (tiledb::QueryConditionCombinationOperatorType)jarg3; 
  {
    try {
      result = ((tiledb::QueryCondition const *)arg1)->combine((tiledb::QueryCondition const &)*arg2,arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::QueryCondition >(new tiledb::QueryCondition((tiledb::QueryCondition &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_QueryCondition_create(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  tiledb::QueryConditionOperatorType arg4 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::QueryCondition > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (tiledb::QueryConditionOperatorType)jarg4; 
  {
    try {
      result = tiledb::QueryCondition::create((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::QueryCondition >(new tiledb::QueryCondition((tiledb::QueryCondition &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Stats_enable() {
  {
    try {
      tiledb::Stats::enable();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Stats_disable() {
  {
    try {
      tiledb::Stats::disable();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Stats_reset() {
  {
    try {
      tiledb::Stats::reset();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Stats_dump(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      tiledb::Stats::dump((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Stats_dump_to_str() {
  char * jresult ;
  std::string result;
  
  {
    try {
      result = tiledb::Stats::dump_to_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_Stats_raw_dump(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      tiledb::Stats::raw_dump((std::string const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TileDB_Stats_raw_dump_to_str() {
  char * jresult ;
  std::string result;
  
  {
    try {
      result = tiledb::Stats::raw_dump_to_str();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_Stats() {
  void * jresult ;
  tiledb::Stats *result = 0 ;
  
  {
    try {
      result = (tiledb::Stats *)new tiledb::Stats();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::Stats >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_Stats(void * jarg1) {
  tiledb::Stats *arg1 = (tiledb::Stats *) 0 ;
  std::shared_ptr< tiledb::Stats > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Stats > *)jarg1;
  arg1 = (tiledb::Stats *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_version() {
  void * jresult ;
  std::vector< int > result;
  
  {
    try {
      result = tiledb::version();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VFS__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::VFS *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  {
    try {
      result = (tiledb::VFS *)new tiledb::VFS((std::shared_ptr< tiledb::Context > const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VFS__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb::Config *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::VFS *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  
  arg2 = (tiledb::Config *)(((std::shared_ptr< const tiledb::Config > *)jarg2) ? ((std::shared_ptr< const tiledb::Config > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Config const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::VFS *)new tiledb::VFS((std::shared_ptr< tiledb::Context > const &)*arg1,(tiledb::Config const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_new_VFS__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = 0 ;
  tiledb::VFS *result = 0 ;
  
  
  arg1 = (tiledb::VFS *)(((std::shared_ptr< const tiledb::VFS > *)jarg1) ? ((std::shared_ptr< const tiledb::VFS > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::VFS const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (tiledb::VFS *)new tiledb::VFS((tiledb::VFS const &)*arg1);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_create_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->create_bucket((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_remove_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->remove_bucket((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VFS_is_bucket(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::VFS const *)arg1)->is_bucket((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_empty_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->empty_bucket((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VFS_is_empty_bucket(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::VFS const *)arg1)->is_empty_bucket((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_create_dir(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->create_dir((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VFS_is_dir(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::VFS const *)arg1)->is_dir((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_remove_dir(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->remove_dir((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileDB_VFS_is_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((tiledb::VFS const *)arg1)->is_file((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_remove_file(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->remove_file((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_VFS_dir_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (uint64_t)((tiledb::VFS const *)arg1)->dir_size((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VFS_ls(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((tiledb::VFS const *)arg1)->ls((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TileDB_VFS_file_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (uint64_t)((tiledb::VFS const *)arg1)->file_size((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_move_file(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->move_file((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_move_dir(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->move_dir((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_VFS_touch(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((tiledb::VFS const *)arg1)->touch((std::string const &)*arg2);
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VFS_context(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Context > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::shared_ptr< tiledb::Context > *) &((tiledb::VFS const *)arg1)->context();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = *result ? new std::shared_ptr< tiledb::Context >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileDB_VFS_config(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  tiledb::Config result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((tiledb::VFS const *)arg1)->config();
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  tiledb::Config >(new tiledb::Config((tiledb::Config &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileDB_delete_VFS(void * jarg1) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const tiledb::TileDBError& e) {
      SWIG_CSharpSetPendingExceptionTileDBError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const tiledb::TypeError& e) {
      SWIG_CSharpSetPendingExceptionTypeError(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());  
    } catch(const tiledb::SchemaMismatch& e) {
      SWIG_CSharpSetPendingExceptionSchemaMismatch(e.what());//SWIG_exception(SWIG_RuntimeError, e.what());   
    } catch(const tiledb::AttributeError& e) {
      SWIG_CSharpSetPendingExceptionAttributeError(e.what());// SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_UnknownError, ""); return ; 
      };
    }
  }
}


SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_TileDB_TypeError_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::TypeError > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_TileDB_SchemaMismatch_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::SchemaMismatch > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_TileDB_AttributeError_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::AttributeError > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

