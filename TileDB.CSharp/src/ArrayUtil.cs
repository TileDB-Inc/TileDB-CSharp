//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TileDB {

public class ArrayUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ArrayUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ArrayUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArrayUtil() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tiledbcsPINVOKE.delete_ArrayUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ArrayUtil() : this(tiledbcsPINVOKE.new_ArrayUtil__SWIG_0(), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArrayUtil(ArrayUtil from) : this(tiledbcsPINVOKE.new_ArrayUtil__SWIG_1(ArrayUtil.getCPtr(from)), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string get_tiledb_version() {
    string ret = tiledbcsPINVOKE.ArrayUtil_get_tiledb_version();
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_array_schema_json_str(Context ctx, string uri) {
    string ret = tiledbcsPINVOKE.ArrayUtil_get_array_schema_json_str(Context.getCPtr(ctx), uri);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_array_metadata_json_str(Context ctx, string uri) {
    string ret = tiledbcsPINVOKE.ArrayUtil_get_array_metadata_json_str(Context.getCPtr(ctx), uri);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_array_metadata_json_str_for_key(Context ctx, string uri, string key) {
    string ret = tiledbcsPINVOKE.ArrayUtil_get_array_metadata_json_str_for_key(Context.getCPtr(ctx), uri, key);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_array_metadata_json_str_from_index(Context ctx, string uri, ulong index) {
    string ret = tiledbcsPINVOKE.ArrayUtil_get_array_metadata_json_str_from_index(Context.getCPtr(ctx), uri, index);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void add_array_metadata_by_json_str(Context ctx, string uri, string jsonstr) {
    tiledbcsPINVOKE.ArrayUtil_add_array_metadata_by_json_str(Context.getCPtr(ctx), uri, jsonstr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add_array_metadata_by_json_str_for_key(Context ctx, string uri, string key, string jsonstr) {
    tiledbcsPINVOKE.ArrayUtil_add_array_metadata_by_json_str_for_key(Context.getCPtr(ctx), uri, key, jsonstr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int export_file_to_path(Context ctx, string file_uri, string output_path, ulong buffer_size) {
    int ret = tiledbcsPINVOKE.ArrayUtil_export_file_to_path(Context.getCPtr(ctx), file_uri, output_path, buffer_size);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int save_file_from_path(Context ctx, string file_uri, string input_path, string mime_type, string mime_coding) {
    int ret = tiledbcsPINVOKE.ArrayUtil_save_file_from_path(Context.getCPtr(ctx), file_uri, input_path, mime_type, mime_coding);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
