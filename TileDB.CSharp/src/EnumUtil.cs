//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TileDB {

public class EnumUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EnumUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EnumUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EnumUtil() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tiledbcsPINVOKE.delete_EnumUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EnumUtil() : this(tiledbcsPINVOKE.new_EnumUtil__SWIG_0(), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public EnumUtil(EnumUtil from) : this(tiledbcsPINVOKE.new_EnumUtil__SWIG_1(EnumUtil.getCPtr(from)), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string querytype_to_str(QueryType querytype) {
    string ret = tiledbcsPINVOKE.EnumUtil_querytype_to_str((int)querytype);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryType querytype_from_str(string s) {
    QueryType ret = (QueryType)tiledbcsPINVOKE.EnumUtil_querytype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string objecttype_to_str(ObjectType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_objecttype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ObjectType objecttype_from_str(string s) {
    ObjectType ret = (ObjectType)tiledbcsPINVOKE.EnumUtil_objecttype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string filesystemtype_to_str(FilesystemType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_filesystemtype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FilesystemType filesystemtype_from_str(string s) {
    FilesystemType ret = (FilesystemType)tiledbcsPINVOKE.EnumUtil_filesystemtype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong datatype_size(DataType datatype) {
    ulong ret = tiledbcsPINVOKE.EnumUtil_datatype_size((int)datatype);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string datatype_to_str(DataType datatype) {
    string ret = tiledbcsPINVOKE.EnumUtil_datatype_to_str((int)datatype);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataType datatype_from_str(string s) {
    DataType ret = (DataType)tiledbcsPINVOKE.EnumUtil_datatype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string arraytype_to_str(ArrayType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_arraytype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ArrayType arraytype_from_str(string s) {
    ArrayType ret = (ArrayType)tiledbcsPINVOKE.EnumUtil_arraytype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string layouttype_to_str(LayoutType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_layouttype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LayoutType layouttype_from_str(string s) {
    LayoutType ret = (LayoutType)tiledbcsPINVOKE.EnumUtil_layouttype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string filtertype_to_str(FilterType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_filtertype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FilterType filtertype_from_str(string s) {
    FilterType ret = (FilterType)tiledbcsPINVOKE.EnumUtil_filtertype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string filteroption_to_str(FilterOption t) {
    string ret = tiledbcsPINVOKE.EnumUtil_filteroption_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FilterOption filteroption_from_str(string s) {
    FilterOption ret = (FilterOption)tiledbcsPINVOKE.EnumUtil_filteroption_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string encryptiontype_to_str(EncryptionType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_encryptiontype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EncryptionType encryptiontype_from_str(string s) {
    EncryptionType ret = (EncryptionType)tiledbcsPINVOKE.EnumUtil_encryptiontype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string querystatus_to_str(QueryStatus t) {
    string ret = tiledbcsPINVOKE.EnumUtil_querystatus_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryStatus querystatus_from_str(string s) {
    QueryStatus ret = (QueryStatus)tiledbcsPINVOKE.EnumUtil_querystatus_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string serializationtype_to_str(SerializationType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_serializationtype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SerializationType serializationtype_from_str(string s) {
    SerializationType ret = (SerializationType)tiledbcsPINVOKE.EnumUtil_serializationtype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string walkordertype_to_str(WalkOrderType t) {
    string ret = tiledbcsPINVOKE.EnumUtil_walkordertype_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WalkOrderType walkordertype_from_str(string s) {
    WalkOrderType ret = (WalkOrderType)tiledbcsPINVOKE.EnumUtil_walkordertype_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string vfsmode_to_str(VFSMode t) {
    string ret = tiledbcsPINVOKE.EnumUtil_vfsmode_to_str((int)t);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VFSMode vfsmode_from_str(string s) {
    VFSMode ret = (VFSMode)tiledbcsPINVOKE.EnumUtil_vfsmode_from_str(s);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
