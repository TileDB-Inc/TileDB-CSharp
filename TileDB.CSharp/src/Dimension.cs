//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TileDB {

public class Dimension : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Dimension(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dimension obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dimension() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbcsPINVOKE.delete_Dimension(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dimension(Dimension arg0) : this(tiledbcsPINVOKE.new_Dimension__SWIG_0(Dimension.getCPtr(arg0)), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint cell_val_num() {
    uint ret = tiledbcsPINVOKE.Dimension_cell_val_num(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dimension set_cell_val_num(uint num) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_set_cell_val_num(swigCPtr, num), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterList filter_list() {
    FilterList ret = new FilterList(tiledbcsPINVOKE.Dimension_filter_list(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dimension set_filter_list(FilterList filter_list) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_set_filter_list(swigCPtr, FilterList.getCPtr(filter_list)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string name() {
    string ret = tiledbcsPINVOKE.Dimension_name(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataType type() {
    DataType ret = (DataType)tiledbcsPINVOKE.Dimension_type(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string domain_to_str() {
    string ret = tiledbcsPINVOKE.Dimension_domain_to_str(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string tile_extent_to_str() {
    string ret = tiledbcsPINVOKE.Dimension_tile_extent_to_str(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool is_valid_intdatatype(int intdatatype) {
    bool ret = tiledbcsPINVOKE.Dimension_is_valid_intdatatype(intdatatype);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_dimension_for_datatype(Context ctx, string name, DataType datatype, string lower_bound_str, string upper_bound_str, string extent_str) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_dimension_for_datatype(Context.getCPtr(ctx), name, (int)datatype, lower_bound_str, upper_bound_str, extent_str), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_int32_dimension(Context ctx, string name, int bound_lower, int bound_upper, int extent) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_int32_dimension(Context.getCPtr(ctx), name, bound_lower, bound_upper, extent), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_int64_dimension(Context ctx, string name, long bound_lower, long bound_upper, long extent) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_int64_dimension(Context.getCPtr(ctx), name, bound_lower, bound_upper, extent), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_uint64_dimension(Context ctx, string name, ulong bound_lower, ulong bound_upper, ulong extent) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_uint64_dimension(Context.getCPtr(ctx), name, bound_lower, bound_upper, extent), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_float32_dimension(Context ctx, string name, float bound_lower, float bound_upper, float extent) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_float32_dimension(Context.getCPtr(ctx), name, bound_lower, bound_upper, extent), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_double_dimension(Context ctx, string name, double bound_lower, double bound_upper, double extent) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_double_dimension(Context.getCPtr(ctx), name, bound_lower, bound_upper, extent), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Dimension create_string_dimension(Context ctx, string name) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.Dimension_create_string_dimension(Context.getCPtr(ctx), name), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
